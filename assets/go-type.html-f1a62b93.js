const n=JSON.parse('{"key":"v-c5a59f06","path":"/Go/tutorial/go-type.html","title":"Go 泛型","lang":"en-US","frontmatter":{"title":"Go 泛型","description":"类型约束 func detail[T string| int| bool](item T) { // 多类型参数定义 fmt.Printf(\\"value: %v \\\\n\\", variable) // 打印变量的值 fmt.Printf(\\"type: %T\\", variable) // 打印变量的类型 } func add[T string| int](a T, b T) { // 多类型参数定义, a b 类型相同, 且都为 string 或 int fmt.Println(a + b) // 打印结果 }","date":"2022-10-20T19:25:13.000Z","category":["Go 教程"],"tag":["Go"],"head":[["meta",{"property":"og:url","content":"https://facsert.github.io/Go/tutorial/go-type.html"}],["meta",{"property":"og:site_name","content":"Facsert"}],["meta",{"property":"og:title","content":"Go 泛型"}],["meta",{"property":"og:description","content":"类型约束 func detail[T string| int| bool](item T) { // 多类型参数定义 fmt.Printf(\\"value: %v \\\\n\\", variable) // 打印变量的值 fmt.Printf(\\"type: %T\\", variable) // 打印变量的类型 } func add[T string| int](a T, b T) { // 多类型参数定义, a b 类型相同, 且都为 string 或 int fmt.Println(a + b) // 打印结果 }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-09-03T14:38:24.000Z"}],["meta",{"property":"article:author","content":"Facsert"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:published_time","content":"2022-10-20T19:25:13.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-03T14:38:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 泛型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-20T19:25:13.000Z\\",\\"dateModified\\":\\"2023-09-03T14:38:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Facsert\\",\\"url\\":\\"https://facsert.github.io\\",\\"email\\":\\"facsert@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"类型约束","slug":"类型约束","link":"#类型约束","children":[]}],"git":{"createdTime":1693751904000,"updatedTime":1693751904000,"contributors":[{"name":"facser","email":"facsert@outlook.com","commits":1}]},"readingTime":{"minutes":0.33,"words":100},"filePathRelative":"Go/tutorial/go-type.md","localizedDate":"October 20, 2022","excerpt":"<h2> 类型约束</h2>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">func</span> detail<span class=\\"token punctuation\\">[</span>T <span class=\\"token builtin\\">string</span><span class=\\"token operator\\">|</span> <span class=\\"token builtin\\">int</span><span class=\\"token operator\\">|</span> <span class=\\"token builtin\\">bool</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span>item T<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>       <span class=\\"token comment\\">// 多类型参数定义</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"value: %v \\\\n\\"</span><span class=\\"token punctuation\\">,</span> variable<span class=\\"token punctuation\\">)</span>         <span class=\\"token comment\\">// 打印变量的值</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"type: %T\\"</span><span class=\\"token punctuation\\">,</span> variable<span class=\\"token punctuation\\">)</span>             <span class=\\"token comment\\">// 打印变量的类型</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> add<span class=\\"token punctuation\\">[</span>T <span class=\\"token builtin\\">string</span><span class=\\"token operator\\">|</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span>a T<span class=\\"token punctuation\\">,</span> b T<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>              <span class=\\"token comment\\">// 多类型参数定义, a b 类型相同, 且都为 string 或 int</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">)</span>                           <span class=\\"token comment\\">// 打印结果</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
