import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-8da2a3ac.js";const t={},e=p(`<h2 id="引申" tabindex="-1"><a class="header-anchor" href="#引申" aria-hidden="true">#</a> 引申</h2><p>举办一个活动, 参加的人必须是能唱歌和玩游戏, 所以不管男女老幼, 只要能唱歌和玩游戏就应该都能参加<br> 对于这个活动, 强调的是能唱歌能玩游戏这两种行为, 不关心其余特质和行为</p><p>用 Go 实现的效果</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span> name <span class="token builtin">string</span> <span class="token punctuation">}</span>               <span class="token comment">// 定义 People 结构体</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p people<span class="token punctuation">)</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>                   <span class="token comment">// 定义结构体方法 sing</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p people<span class="token punctuation">)</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>                   <span class="token comment">// 定义结构体方法 play</span>

<span class="token keyword">func</span> <span class="token function">activate</span><span class="token punctuation">(</span>singer s<span class="token punctuation">,</span> player p<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 定义函数, 参数为 singer 和 player 类型</span>
    s<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                     
    p<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                     
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而实际上 People 类型不能作为 activate 的参数<br> People 即使具有 singer 类型和 player 类型的行为, 但由于类型限制, 无法使用</p><p>为了解决以上问题产生了接口类型这一概念</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> singer <span class="token keyword">interface</span> <span class="token punctuation">{</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>                 <span class="token comment">// 定义 singer 接口类型, 只要实现 sing() 即可作为 singer 类型使用 </span>
<span class="token keyword">type</span> player <span class="token keyword">interface</span> <span class="token punctuation">{</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>                 <span class="token comment">// 定义 player 接口类型, 只要实现 play() 即可作为 player 类型使用</span>

<span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span> name <span class="token builtin">string</span> <span class="token punctuation">}</span>               <span class="token comment">// 定义 People 结构体</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p people<span class="token punctuation">)</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>                   <span class="token comment">// 定义结构体方法 sing</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p people<span class="token punctuation">)</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>                   <span class="token comment">// 定义结构体方法 play</span>

<span class="token keyword">func</span> <span class="token function">activate</span><span class="token punctuation">(</span>singer s<span class="token punctuation">,</span> player p<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 定义函数, 参数为 singer 和 player 类型</span>
    s<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>                     

human <span class="token operator">:=</span> People<span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&quot;facser&quot;</span> <span class="token punctuation">}</span>                <span class="token comment">// 实例化 People, People 实现了 sing() play()</span>
<span class="token function">activate</span><span class="token punctuation">(</span>human<span class="token punctuation">,</span> human<span class="token punctuation">)</span>                           <span class="token comment">// 第一个 human 作为 singer 类型，第二个 human 作为 player 类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口类型是一个自定义的抽象类型<br> 接口用于定义拥有同样行为的类型<br> 任意其它类型只要包含接口定义的方法， 都可以作为接口类型使用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> <span class="token operator">&lt;</span><span class="token keyword">interface</span> name<span class="token operator">&gt;</span> <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token operator">&lt;</span>function name<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>parameter name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>parameter <span class="token keyword">type</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token keyword">return</span> <span class="token keyword">type</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> app <span class="token keyword">interface</span> <span class="token punctuation">{</span>                             <span class="token comment">// 定义一个 app 类型接口</span>
    <span class="token function">open</span><span class="token punctuation">(</span>click <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span>                       <span class="token comment">// 定义 app 类型需要满足的条件</span>
    <span class="token function">close</span><span class="token punctuation">(</span>action <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>                  <span class="token comment">// 任意结构体实现了接口定义的方法就可以作为 app 类型使用</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> browser <span class="token keyword">struct</span> <span class="token punctuation">(</span>                            <span class="token comment">// 定义 browser 类型结构体</span>
    name <span class="token builtin">string</span>                                  <span class="token comment">// 定义 browser 结构体属性</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b browser<span class="token punctuation">)</span> <span class="token function">open</span><span class="token punctuation">(</span>click <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token comment">// browser 类型结构体实现 open 方法</span>
    <span class="token keyword">return</span> <span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;click %d open %s&quot;</span><span class="token punctuation">,</span> click<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b browser<span class="token punctuation">)</span> <span class="token function">close</span><span class="token punctuation">(</span>action <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>   <span class="token comment">// browser 类型结构体实现 close 方法</span>
    <span class="token keyword">return</span> <span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;use %s close %s&quot;</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">relax</span><span class="token punctuation">(</span>application app<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 定义函数 relax, 函数参数为 app 接口类型</span>
    <span class="token function">Println</span><span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment">// 执行 read 方法</span>
    <span class="token function">Println</span><span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token string">&quot;swipe up&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// 执行 search 方法</span>
<span class="token punctuation">}</span>

chrome <span class="token operator">:=</span> browser<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">&quot;chrome browser&quot;</span><span class="token punctuation">}</span>        <span class="token comment">// 实例化 chrome, chrome 包含 open close 方法</span>
<span class="token function">relax</span><span class="token punctuation">(</span>chrome<span class="token punctuation">)</span>                                    <span class="token comment">// chrome 满足接口条件, chrome 可以当做 app 类型使用</span>
<span class="token operator">&gt;</span> click <span class="token number">2</span> open chrome browser
<span class="token operator">&gt;</span> use swipe up <span class="token builtin">close</span> chrome browser
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","go-7-interface.html.vue"]]);export{r as default};
