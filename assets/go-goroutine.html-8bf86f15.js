const n=JSON.parse('{"key":"v-5738d8c2","path":"/Go/tutorial/go-goroutine.html","title":"Go 协程","lang":"en-US","frontmatter":{"title":"Go 协程","description":"协程 golang 支持并发和并行, 可以同时跑多个协程 golang 使用 go &lt;function name&gt;() 创建并执行协程 协程本质是一个函数 import ( . \\"fmt\\" \\"time\\" \\"sync\\" ) var wg sync.WaitGroup // 定义 wg 辅助协程计数和执行 func main() { Println(time.Now()) // 执行前打印时间 wg.Add(2) // 标记需要执行两个协程 go cook() // 新建协程, 类似于将 cook 放后台执行, main 直接接执行下一行 go wash() // 新建协程, 类似于将 wash 放后台执行, main 直接接执行下一行 wg.Wait() // 等待所有的协程执行完成 Println(time.Now()) // 所有协程执行完后打印时间 } func cook() { time.Sleep(time.Second * 3) // sleep 3s Println(\\"cook by machine use 3s\\") wg.Done() // 标记协程执行完毕 } func wash() { time.Sleep(time.Second * 2) Println(\\"wash colse by machine use 2s\\") wg.Done() } &gt; 2023-04-01 21:51:20.692681383 +0800 CST m=+0.000016384 &gt; wash colse by machine use 2s &gt; cook by machine use 3s &gt; 2023-04-01 21:51:23.693482859 +0800 CST m=+3.000817861","date":"2023-03-20T19:23:13.000Z","category":["Go 教程"],"tag":["Go"],"head":[["meta",{"property":"og:url","content":"https://facsert.github.io/Go/tutorial/go-goroutine.html"}],["meta",{"property":"og:site_name","content":"Facsert"}],["meta",{"property":"og:title","content":"Go 协程"}],["meta",{"property":"og:description","content":"协程 golang 支持并发和并行, 可以同时跑多个协程 golang 使用 go &lt;function name&gt;() 创建并执行协程 协程本质是一个函数 import ( . \\"fmt\\" \\"time\\" \\"sync\\" ) var wg sync.WaitGroup // 定义 wg 辅助协程计数和执行 func main() { Println(time.Now()) // 执行前打印时间 wg.Add(2) // 标记需要执行两个协程 go cook() // 新建协程, 类似于将 cook 放后台执行, main 直接接执行下一行 go wash() // 新建协程, 类似于将 wash 放后台执行, main 直接接执行下一行 wg.Wait() // 等待所有的协程执行完成 Println(time.Now()) // 所有协程执行完后打印时间 } func cook() { time.Sleep(time.Second * 3) // sleep 3s Println(\\"cook by machine use 3s\\") wg.Done() // 标记协程执行完毕 } func wash() { time.Sleep(time.Second * 2) Println(\\"wash colse by machine use 2s\\") wg.Done() } &gt; 2023-04-01 21:51:20.692681383 +0800 CST m=+0.000016384 &gt; wash colse by machine use 2s &gt; cook by machine use 3s &gt; 2023-04-01 21:51:23.693482859 +0800 CST m=+3.000817861"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-09-03T14:38:24.000Z"}],["meta",{"property":"article:author","content":"Facsert"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:published_time","content":"2023-03-20T19:23:13.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-03T14:38:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 协程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-20T19:23:13.000Z\\",\\"dateModified\\":\\"2023-09-03T14:38:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Facsert\\",\\"url\\":\\"https://facsert.github.io\\",\\"email\\":\\"facsert@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"协程","slug":"协程","link":"#协程","children":[]},{"level":2,"title":"channel","slug":"channel","link":"#channel","children":[{"level":3,"title":"无缓冲通道","slug":"无缓冲通道","link":"#无缓冲通道","children":[]},{"level":3,"title":"有缓冲通道","slug":"有缓冲通道","link":"#有缓冲通道","children":[]}]}],"git":{"createdTime":1693751904000,"updatedTime":1693751904000,"contributors":[{"name":"facser","email":"facsert@outlook.com","commits":1}]},"readingTime":{"minutes":2.81,"words":843},"filePathRelative":"Go/tutorial/go-goroutine.md","localizedDate":"March 20, 2023","excerpt":"<h2> 协程</h2>\\n<p>golang 支持并发和并行, 可以同时跑多个协程<br>\\ngolang 使用 <code>go &lt;function name&gt;()</code> 创建并执行协程<br>\\n协程本质是一个函数</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token punctuation\\">.</span> <span class=\\"token string\\">\\"fmt\\"</span>\\n    <span class=\\"token string\\">\\"time\\"</span>\\n    <span class=\\"token string\\">\\"sync\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">var</span> wg sync<span class=\\"token punctuation\\">.</span>WaitGroup                            <span class=\\"token comment\\">// 定义 wg 辅助协程计数和执行</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>time<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Now</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>                          <span class=\\"token comment\\">// 执行前打印时间</span>\\n\\n    wg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>                                    <span class=\\"token comment\\">// 标记需要执行两个协程</span>\\n    <span class=\\"token keyword\\">go</span> <span class=\\"token function\\">cook</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>                                    <span class=\\"token comment\\">// 新建协程, 类似于将 cook 放后台执行, main 直接接执行下一行    </span>\\n    <span class=\\"token keyword\\">go</span> <span class=\\"token function\\">wash</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>                                    <span class=\\"token comment\\">// 新建协程, 类似于将 wash 放后台执行, main 直接接执行下一行  </span>\\n\\n    wg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Wait</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>                                    <span class=\\"token comment\\">// 等待所有的协程执行完成</span>\\n    <span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>time<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Now</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>                          <span class=\\"token comment\\">// 所有协程执行完后打印时间</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">cook</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    time<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Sleep</span><span class=\\"token punctuation\\">(</span>time<span class=\\"token punctuation\\">.</span>Second <span class=\\"token operator\\">*</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span>                  <span class=\\"token comment\\">// sleep 3s</span>\\n    <span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"cook by machine use 3s\\"</span><span class=\\"token punctuation\\">)</span>\\n    wg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Done</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>                                    <span class=\\"token comment\\">// 标记协程执行完毕</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">wash</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    time<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Sleep</span><span class=\\"token punctuation\\">(</span>time<span class=\\"token punctuation\\">.</span>Second <span class=\\"token operator\\">*</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"wash colse by machine use 2s\\"</span><span class=\\"token punctuation\\">)</span>\\n    wg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Done</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">2023</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">04</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">01</span> <span class=\\"token number\\">21</span><span class=\\"token punctuation\\">:</span><span class=\\"token number\\">51</span><span class=\\"token punctuation\\">:</span><span class=\\"token number\\">20.692681383</span> <span class=\\"token operator\\">+</span><span class=\\"token number\\">0800</span> CST m<span class=\\"token operator\\">=</span><span class=\\"token operator\\">+</span><span class=\\"token number\\">0.000016384</span>\\n<span class=\\"token operator\\">&gt;</span> wash colse by machine use 2s\\n<span class=\\"token operator\\">&gt;</span> cook by machine use 3s\\n<span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">2023</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">04</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">01</span> <span class=\\"token number\\">21</span><span class=\\"token punctuation\\">:</span><span class=\\"token number\\">51</span><span class=\\"token punctuation\\">:</span><span class=\\"token number\\">23.693482859</span> <span class=\\"token operator\\">+</span><span class=\\"token number\\">0800</span> CST m<span class=\\"token operator\\">=</span><span class=\\"token operator\\">+</span><span class=\\"token number\\">3.000817861</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
