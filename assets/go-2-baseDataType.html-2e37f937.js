import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-8da2a3ac.js";const p={},e=t(`<p>Golang 基本类型有</p><ul><li><a href="#%E6%95%B4%E5%BD%A2">整形</a></li><li><a href="#%E6%B5%AE%E7%82%B9%E5%9E%8B">浮点型</a></li><li><a href="#%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B">布尔类型</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B">字符串</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">类型转换</a></li></ul><h2 id="整形" tabindex="-1"><a class="header-anchor" href="#整形" aria-hidden="true">#</a> 整形</h2><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">范围</th></tr></thead><tbody><tr><td style="text-align:left;"><code>int8</code></td><td style="text-align:left;">-128 - 127</td></tr><tr><td style="text-align:left;"><code>uint8</code> / <code>byte</code></td><td style="text-align:left;">0 - 255</td></tr><tr><td style="text-align:left;"><code>int16</code></td><td style="text-align:left;">-32768 - 32767</td></tr><tr><td style="text-align:left;"><code>uint16</code></td><td style="text-align:left;">0 - 65535</td></tr><tr><td style="text-align:left;"><code>int32</code> / <code>rune</code></td><td style="text-align:left;">-2147483648 ~ 2147483647</td></tr><tr><td style="text-align:left;"><code>uint32</code></td><td style="text-align:left;">0 ~ 4294967295</td></tr><tr><td style="text-align:left;"><code>int64</code></td><td style="text-align:left;">-9223372036854775808 ~ 9223372036854775807</td></tr><tr><td style="text-align:left;"><code>uint64</code></td><td style="text-align:left;">0 ~ 18446744073709551615</td></tr><tr><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">32 位系统 int32， 64 位系统 int64</td></tr><tr><td style="text-align:left;"><code>uint</code></td><td style="text-align:left;">32 位系统 uint32， 64 位系统 uint64</td></tr></tbody></table><h3 id="整形类型转换" tabindex="-1"><a class="header-anchor" href="#整形类型转换" aria-hidden="true">#</a> 整形类型转换</h3><p>不同整形之间不可以进行运算, 需要转换为同一类型运算<br> 数字可以与任何整形运算, 运算结果类型不变</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> num8 <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">8</span>
<span class="token keyword">var</span> num16 <span class="token builtin">int16</span> <span class="token operator">=</span> <span class="token number">16</span>

<span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;type: %T\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;num8 add: %d \\n&quot;</span><span class="token punctuation">,</span>num8 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span>               <span class="token comment">// 数字可直接与 int8 类型数据运算</span>
<span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;num16 add: %d \\n&quot;</span><span class="token punctuation">,</span>num16 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token builtin">int</span>
<span class="token operator">&gt;</span> num8 add<span class="token punctuation">:</span><span class="token number">11</span> <span class="token keyword">type</span><span class="token punctuation">:</span><span class="token builtin">int8</span>                          <span class="token comment">// 结果任然为 int8</span>
<span class="token operator">&gt;</span> num8 add<span class="token punctuation">:</span><span class="token number">19</span> <span class="token keyword">type</span><span class="token punctuation">:</span><span class="token builtin">int16</span>

<span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;num16 add num8: %d \\n&quot;</span><span class="token punctuation">,</span>num16 <span class="token operator">+</span> num16<span class="token punctuation">)</span>   <span class="token comment">// int8 与 int16 不能直接运算</span>
<span class="token operator">&gt;</span> <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span> invalid operation<span class="token punctuation">:</span> num16 <span class="token operator">+</span> num8 <span class="token punctuation">(</span>mismatched types <span class="token builtin">int16</span> and <span class="token builtin">int8</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数字类型数据之间可以通过 <code>&lt;type&gt;()</code> 方式进行类型之间的转换</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">8</span>                                  <span class="token comment">// int   num = 8</span>
num8 <span class="token operator">:=</span> <span class="token function">int8</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>                                <span class="token comment">// int8  num8 = 8</span>
num16 <span class="token operator">:=</span> <span class="token function">int16</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>                              <span class="token comment">// int16 num16 = 8</span>
num32 <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>                              <span class="token comment">// int32 num32 = 8</span>
num64 <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>                              <span class="token comment">// int64 num64 = 8</span>

numFloat32 <span class="token operator">:=</span> <span class="token function">float32</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>                       <span class="token comment">// float32 numFloat32 = 8</span>
numFloat64 <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>                       <span class="token comment">// float64 numFloat64 = 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进制赋值" tabindex="-1"><a class="header-anchor" href="#进制赋值" aria-hidden="true">#</a> 进制赋值</h3><p>二进制 八进制 十六进制可以通过前缀赋值<br> 二进制 八进制 十六进制可以通过不同占位符打印</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>binary <span class="token operator">:=</span> <span class="token number">0b11</span>                                   <span class="token comment">// int binary      = 3   2 进制赋值 </span>
octal <span class="token operator">:=</span> <span class="token number">0o11</span>                                    <span class="token comment">// int octal       = 9   8 进制赋值 </span>
hexadecimal <span class="token operator">:=</span> <span class="token number">0x11</span>                              <span class="token comment">// int hexadecimal = 17  16 进制赋值 </span>

<span class="token keyword">var</span> ten <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> ten<span class="token punctuation">)</span>                         <span class="token comment">// 10</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%b \\n&quot;</span><span class="token punctuation">,</span> ten<span class="token punctuation">)</span>                         <span class="token comment">// 1010 占位符%b表示二进制</span>

<span class="token keyword">var</span> eight <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">077</span>                              <span class="token comment">// 八进制  以0开头</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%o \\n&quot;</span><span class="token punctuation">,</span> eight<span class="token punctuation">)</span>                       <span class="token comment">// 77 占位符%o表示八进制</span>

<span class="token keyword">var</span> sixteen <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0xff</span>                           <span class="token comment">// 十六进制  以0x开头</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%x \\n&quot;</span><span class="token punctuation">,</span> sixteen<span class="token punctuation">)</span>                     <span class="token comment">// ff 占位符%x表示十六进制</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%X \\n&quot;</span><span class="token punctuation">,</span> sixteen<span class="token punctuation">)</span>                     <span class="token comment">// FF 占位符%X表示十六进制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型最大值和最小值" tabindex="-1"><a class="header-anchor" href="#类型最大值和最小值" aria-hidden="true">#</a> 类型最大值和最小值</h3><p>数字类型最大值和最小值, 值在 math 包定义</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> math

intSize <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token function">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token comment">// 32 or 64</span>

MaxInt    <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>intSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
MinInt    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>intSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
MaxInt8   <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">1</span>
MinInt8   <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span>
MaxInt16  <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">15</span> <span class="token operator">-</span> <span class="token number">1</span>
MinInt16  <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">15</span>
MaxInt32  <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span>
MinInt32  <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span>
MaxInt64  <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">63</span> <span class="token operator">-</span> <span class="token number">1</span>
MinInt64  <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">63</span>
MaxUint   <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>intSize <span class="token operator">-</span> <span class="token number">1</span>
MaxUint8  <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">1</span>
MaxUint16 <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">-</span> <span class="token number">1</span>
MaxUint32 <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">32</span> <span class="token operator">-</span> <span class="token number">1</span>
MaxUint64 <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">64</span> <span class="token operator">-</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浮点型" tabindex="-1"><a class="header-anchor" href="#浮点型" aria-hidden="true">#</a> 浮点型</h2><p>浮点型类型: float32 float64</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">2.17</span>
<span class="token keyword">var</span> pi <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">3.1415926535</span>

<span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;e: %f \\n&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>                            <span class="token comment">// e: 2.170000 </span>
<span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;pi: %f \\n&quot;</span><span class="token punctuation">,</span> pi<span class="token punctuation">)</span>                          <span class="token comment">// pi: 3.141593 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型" aria-hidden="true">#</a> 布尔类型</h2><p>布尔值: true false<br> 布尔值不能进行数字运算<br> 布尔类型的值默认值是 false</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>yes<span class="token punctuation">,</span> no <span class="token operator">:=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
yes <span class="token operator">==</span> no                                        <span class="token comment">// false </span>
yes <span class="token operator">||</span> no                                        <span class="token comment">// true 逻辑或</span>
yes <span class="token operator">&amp;&amp;</span> no                                        <span class="token comment">// false 逻辑且</span>

love<span class="token punctuation">,</span> happy <span class="token operator">:=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span>                       <span class="token comment">// 布尔运算的哲学</span>
<span class="token operator">!</span>love                                            <span class="token comment">// false  not love is false</span>
love <span class="token operator">==</span> happy                                    <span class="token comment">// false  love equal to happy is false </span>
love <span class="token operator">!=</span> happy                                    <span class="token comment">// true   love not equal to happy is true</span>
happy <span class="token operator">&amp;&amp;</span> love                                    <span class="token comment">// false  love and happy is not true</span>
happy <span class="token operator">||</span> love                                    <span class="token comment">// true   love or happy is true </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h2><h3 id="字符" tabindex="-1"><a class="header-anchor" href="#字符" aria-hidden="true">#</a> 字符</h3><p>byte(uint8) ACSII 表中的一个字符, 底层是一个 0-255 数字(数字与 ACSII 表字符绑定)<br> rune(int32) Unicode 编码中的一个字符(包含世界大部分语言字符), Unicode 表包含 ACSII 表</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;D&#39;</span>                                  <span class="token comment">// &#39;D&#39; 在 ACSII 中第 68 位</span>
<span class="token keyword">var</span> c <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token number">68</span>                                   <span class="token comment">// ACSII 中 68 为 &#39;D&#39;, 两种赋值等价</span>

<span class="token keyword">var</span> a <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">&#39;中&#39;</span>                                 <span class="token comment">// &#39;中&#39; 在 Unicode 中第 20013 位</span>
<span class="token keyword">var</span> c <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token number">20013</span>                                <span class="token comment">// Unicode 中 20013 为 &#39;中&#39;, 两种赋值等价</span>

<span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;a equal c: %v\\n&quot;</span><span class="token punctuation">,</span> a <span class="token operator">==</span> c<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> a equal c<span class="token punctuation">:</span> <span class="token boolean">true</span>

<span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;acsii length: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;unicode length: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token string">&quot;中文&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> acsii length<span class="token punctuation">:</span> <span class="token number">3</span>                                <span class="token comment">// 单个 acsii 字符长度为 1</span>
<span class="token operator">&gt;</span> unicode length<span class="token punctuation">:</span> <span class="token number">6</span>                              <span class="token comment">// 单个 unicode 字符长度为 3, 遍历 unicode 不能用索引</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>Golang 字符串本质是单个字符的集合, 单个字符的本质是数字, 通过不同规范和字符对应(ACSII 和 Unicode)<br> 单个 acsii 和 unicode 字符长度不同, 使用 range 遍历</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> acsii<span class="token punctuation">,</span> unicode <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;中文&quot;</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> char <span class="token operator">:=</span> <span class="token keyword">range</span> acsii <span class="token punctuation">{</span>
   <span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type: %T %T, value: %v, value: %c\\n&quot;</span><span class="token punctuation">,</span> char<span class="token punctuation">,</span> acsii<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> char<span class="token punctuation">,</span> char<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">int32</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">115</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> s              <span class="token comment">// range 取出的单个字符是 rune 类型</span>
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">int32</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">116</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> t          
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">int32</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">114</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> r          
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">int32</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">20013</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> 中           <span class="token comment">// 使用 range 遍历 unicode 字符串</span>
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">int32</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">25991</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> 文       

<span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>unicode<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
   char <span class="token operator">:=</span> unicode<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
   <span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type: %T, value: %v, value: %c\\n&quot;</span><span class="token punctuation">,</span> char<span class="token punctuation">,</span> char<span class="token punctuation">,</span> char<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">uint8</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">228</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> ä              <span class="token comment">// 通过 index 索引取出的字符是 byte 类型</span>
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">uint8</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">184</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> ¸
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">uint8</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">173</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> ­
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">uint8</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">230</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> æ
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">uint8</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> 
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">uint8</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">135</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串可以与单个字符组成的切片相互转化</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>slice<span class="token punctuation">,</span> list <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span><span class="token string">&quot;中文&quot;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type: %T, value: %v\\n&quot;</span><span class="token punctuation">,</span> slice<span class="token punctuation">,</span> slice<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">}</span> <span class="token comment">// 字符串转 byte</span>
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span><span class="token punctuation">{</span><span class="token number">20013</span><span class="token punctuation">,</span> <span class="token number">25991</span><span class="token punctuation">}</span>    <span class="token comment">// 字符串转 rune</span>

<span class="token keyword">var</span> strByte <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;D&#39;</span>
<span class="token keyword">var</span> strRune <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">&#39;文&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type: %T, value: %v\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>strByte<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>strByte<span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type: %T, value: %v\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>strRune<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>strRune<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> D                          <span class="token comment">// byte 转 string</span>
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> 文                         <span class="token comment">// rune 转 string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>unicode 数值范围内任意数字可以转化为对应的字符<br> 负数不在 unicode 数值范围内, 负数转化后显示一致, 未能查询到相关解释</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">68</span>
<span class="token keyword">var</span> num8 <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">66</span>
<span class="token keyword">var</span> num16 <span class="token builtin">int16</span> <span class="token operator">=</span> <span class="token number">66</span>
<span class="token keyword">var</span> num32 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">25991</span>
<span class="token keyword">var</span> num64 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>

<span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type %T, value: %c\\n&quot;</span><span class="token punctuation">,</span> num16<span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>num16<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type %T, value: %c\\n&quot;</span><span class="token punctuation">,</span> num32<span class="token punctuation">,</span> <span class="token function">rune</span><span class="token punctuation">(</span>num32<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token operator">&gt;</span> Type <span class="token builtin">int</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> D                          
<span class="token operator">&gt;</span> Type <span class="token builtin">int8</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> B
<span class="token operator">&gt;</span> Type <span class="token builtin">int16</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> B
<span class="token operator">&gt;</span> Type <span class="token builtin">int32</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> 文                          
<span class="token operator">&gt;</span> Type <span class="token builtin">int64</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> �                           
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串操作" tabindex="-1"><a class="header-anchor" href="#字符串操作" aria-hidden="true">#</a> 字符串操作</h3><p>字符串定义后可以查看但不可更改</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>str <span class="token operator">:=</span> <span class="token string">&quot;learning&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type: %T value: %c base: %v\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">uint8</span> value<span class="token punctuation">:</span> e base<span class="token punctuation">:</span> <span class="token number">97</span>

str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;m&quot;</span>
<span class="token operator">&gt;</span> <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span> cannot assign to str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>value of <span class="token keyword">type</span> <span class="token builtin">byte</span><span class="token punctuation">)</span>

uStr <span class="token operator">:=</span> <span class="token string">&quot;中文&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type: %T value: %v length: %v\\n&quot;</span><span class="token punctuation">,</span> uStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> uStr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>uStr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> Type<span class="token punctuation">:</span> <span class="token builtin">uint8</span> value<span class="token punctuation">:</span> <span class="token number">184</span> length<span class="token punctuation">:</span> <span class="token number">6</span>

strRune <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>uStr<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;value: %#v length: %v\\n&quot;</span><span class="token punctuation">,</span> strRune<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>strRune<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span><span class="token punctuation">{</span><span class="token number">20013</span><span class="token punctuation">,</span> <span class="token number">25991</span><span class="token punctuation">}</span> length<span class="token punctuation">:</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>                   <span class="token comment">// 以 sep 为分隔符, 切割字符串成切片</span>
strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sub<span class="token punctuation">)</span> <span class="token builtin">bool</span>                    <span class="token comment">// 判断 s 是否包含 sub</span>
strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sub<span class="token punctuation">)</span> <span class="token builtin">int</span>                        <span class="token comment">// sub 在 s 的序号</span>
strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> sep<span class="token punctuation">)</span> <span class="token builtin">string</span>                  <span class="token comment">// 通过 sep 把 slice 连接成一个字符串</span>
strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token builtin">string</span>       <span class="token comment">// 将 s 中的 old 替换为 new, 替换 count 次</span>
strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sub<span class="token punctuation">)</span> <span class="token builtin">int</span>                        <span class="token comment">// 返回 sub 在 s 中出现次数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><p>任意类型数据都可以转换为字符串</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprinf</span><span class="token punctuation">(</span><span class="token string">&quot;%v&quot;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>variable<span class="token operator">&gt;</span><span class="token punctuation">)</span>                <span class="token comment">// 万能转换, any -&gt; string</span>

s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>                            <span class="token comment">// 32    int -&gt; string</span>
s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatBool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                    <span class="token comment">// true  bool -&gt; string</span>
s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token comment">// -1000 int64 -&gt; string(2 进制) </span>
s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatUint</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>                 <span class="token comment">// ff    uint64 -&gt; string(16 进制)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串转其它类型可能会失败, 转数字时还需考虑进制和转换后的类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>i<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token string">&quot;-42&quot;</span><span class="token punctuation">)</span>                    <span class="token comment">// 42   string -&gt; int</span>
b<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>              <span class="token comment">// true string -&gt; bool</span>
f<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;3.14&quot;</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>         <span class="token comment">// 3.14 string -&gt; float64</span>
i<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span><span class="token string">&quot;-42&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        <span class="token comment">// -42  string -&gt; int64</span>
u<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseUint</span><span class="token punctuation">(</span><span class="token string">&quot;42&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        <span class="token comment">// 42   string -&gt; uint32</span>

<span class="token comment">// ParseFloat (str, bitSize)  bitSize:{32:float32, 64:float64}</span>
<span class="token comment">// ParseInt  ParseUint (str, base, bitSize)</span>

<span class="token comment">// str string: 待转换的字符串</span>
<span class="token comment">// base int: str 的进制( base=16, s 为 16 进制的字符串)</span>
<span class="token comment">// bitSize int: {0:int, 8:int8, 16:int16, 32:int32, 64:int64}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","go-2-baseDataType.html.vue"]]);export{k as default};
