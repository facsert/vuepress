import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,a as n,b as e,e as c,f as i}from"./app-8da2a3ac.js";const u={},l={href:"https://gin-gonic.com/zh-cn/",target:"_blank",rel:"noopener noreferrer"},k=i(`<p>Gin 是一个用 Go (Golang) 编写的 HTTP Web 框架</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>使用 <code>go get -u</code> 下载最新的 gin 包, 同时把依赖信息写入 go.mod</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct             <span class="token comment"># 设置 go 下载源为国内源</span>
 $ go get <span class="token parameter variable">-u</span> github.com/gin-gonic/gin                      <span class="token comment"># -u 强制使用网络下载安装 Gin 依赖包</span>
 
 $ go list <span class="token parameter variable">-m</span> all <span class="token operator">|</span> <span class="token function">grep</span> gin
 <span class="token operator">&gt;</span> github.com/gin-gonic/gin v1.9.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ go mod init web                                         <span class="token comment"># 初始化 web 项目</span>
 $ <span class="token function">touch</span> main.go                                           <span class="token comment"># 创建项目入口文件</span>
 $ go get <span class="token parameter variable">-u</span> github.com/gin-gonic/gin                      <span class="token comment"># 安装 gin 框架</span>

 $ <span class="token function">ls</span> <span class="token parameter variable">-l</span>
 total <span class="token number">24</span>
 <span class="token operator">&gt;</span> -rw-r--r-- <span class="token number">1</span> root root  <span class="token number">2265</span> Jul <span class="token number">19</span> 02:45 go.mod
 <span class="token operator">&gt;</span> -rw-r--r-- <span class="token number">1</span> root root <span class="token number">15259</span> Jul <span class="token number">19</span> 02:45 go.sum
 <span class="token operator">&gt;</span> -rw-r--r-- <span class="token number">1</span> root root   <span class="token number">234</span> Jul <span class="token number">19</span> 03:18 main.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编辑 main.go 文件，添加代码</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>                             <span class="token comment">// 引入 gin </span>
    <span class="token string">&quot;net/http&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    engine <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment">// 实例化 engine 对象</span>
    engine<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> webRoot<span class="token punctuation">)</span>                               <span class="token comment">// 注册路由 / 及其处理函数</span>
    engine<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">,</span> webIndex<span class="token punctuation">)</span>                         <span class="token comment">// 注册路由 /index 及其处理函数</span>
    engine<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">)</span>                                    <span class="token comment">// 启动服务, 监听 8080 端口</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">webRoot</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;this is root page&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">webIndex</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;this is index page&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>main.go</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ go run main.go
 <span class="token operator">&gt;</span> <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
 <span class="token operator">&gt;</span> <span class="token punctuation">[</span>GIN-debug<span class="token punctuation">]</span> GET    /                         --<span class="token operator">&gt;</span> main.webRoot <span class="token punctuation">(</span><span class="token number">3</span> handlers<span class="token punctuation">)</span>
 <span class="token operator">&gt;</span> <span class="token punctuation">[</span>GIN-debug<span class="token punctuation">]</span> GET    /index                    --<span class="token operator">&gt;</span> main.webIndex <span class="token punctuation">(</span><span class="token number">3</span> handlers<span class="token punctuation">)</span>
 <span class="token operator">&gt;</span> <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
 <span class="token operator">&gt;</span> <span class="token punctuation">[</span>GIN-debug<span class="token punctuation">]</span> Listening and serving HTTP on :8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由参数" tabindex="-1"><a class="header-anchor" href="#路由参数" aria-hidden="true">#</a> 路由参数</h2><p>Github 个人主页 <code>http://github.com/{username}</code>, 替换不同用户名即可进入不同用户的 Github 主页<br> 网址中的 <code>username</code> 就是路由参数, 后台服务拿到 <code>username</code> 的实际值然后返回该用户的信息</p><p>Gin 通过 Param() 或 Params 获取路由中的参数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Param</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>                 <span class="token comment">// Param 返回 string 类型</span>

<span class="token keyword">type</span> Params <span class="token punctuation">[</span><span class="token punctuation">]</span>Param
<span class="token keyword">func</span> <span class="token punctuation">(</span>ps Params<span class="token punctuation">)</span> <span class="token function">ByName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>va <span class="token builtin">string</span><span class="token punctuation">)</span>           <span class="token comment">// Params 的参数查找方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>ps Params<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>           <span class="token comment">// Params 的参数查找方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    engine<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/index/:id&quot;</span><span class="token punctuation">,</span> routeParam<span class="token punctuation">)</span>                   <span class="token comment">// 注册路由和对应函数</span>
    engine<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/group/:name&quot;</span><span class="token punctuation">,</span> routeParams<span class="token punctuation">)</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">routeParam</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token comment">// index 任意子界面</span>
    id <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>                                    <span class="token comment">// Param 获取路由参数的值</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;id: %s&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">routeParams</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment">// group 任意子界面</span>
    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>Params<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>                         <span class="token comment">// Params.Get 获取路由参数值</span>
    m <span class="token operator">:=</span> c<span class="token punctuation">.</span>Params<span class="token punctuation">.</span><span class="token function">ByName</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>                           <span class="token comment">// Params.ByName 获取路由参数值</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;n: %s  m: %s&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="query-参数" tabindex="-1"><a class="header-anchor" href="#query-参数" aria-hidden="true">#</a> Query 参数</h2><p>网址 <code>https://github.com/facsert?tab=repositories</code> 中 <code>?</code> 后的便是 Quary 参数, 参数形式 <code>key=value</code>, 通过 &amp; 分隔</p><p>Gin 通过以下方法获取 query 参数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">GetQuery</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Query</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DefaultQuery</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">GetQueryArray</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">QueryArray</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    engine<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/index/&quot;</span><span class="token punctuation">,</span> routeQuerys<span class="token punctuation">)</span>                     <span class="token comment">// 注册路由和对应函数</span>
    engine<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/group/&quot;</span><span class="token punctuation">,</span> routeQuery<span class="token punctuation">)</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
                                                   
<span class="token keyword">func</span> <span class="token function">routeQuerys</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token comment">// http://localhost:8080/index?id=4</span>
    id <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">QueryArry</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>                                <span class="token comment">// 获取 queray 参数值列表</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;id: %v&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>                            <span class="token comment">// id: [4]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">routeQuery</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token comment">// http://localhost:8080/group?name=jack </span>
    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;nobody&quot;</span><span class="token punctuation">)</span>             <span class="token comment">// 未获取到则使用默认值 nobody</span>
    m <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>                                   <span class="token comment">// query 获取参数值</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;n: %s  m: %s&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>                    <span class="token comment">// n: jack  m: jack</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="form-参数" tabindex="-1"><a class="header-anchor" href="#form-参数" aria-hidden="true">#</a> Form 参数</h2><p>Form 表单数据存储在 POST 请求体中, 请求体格式: <code>application/x-www-form-urlencoded</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">PostForm</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DefaultPostForm</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue <span class="token builtin">string</span><span class="token punctuation">)</span> stri
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">GetPostForm</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">PostFormMap</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>


<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">PostFormArray</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">GetPostFormArray</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">GetPostFormMap</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    engine<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/table/&quot;</span><span class="token punctuation">,</span> table<span class="token punctuation">)</span>                          <span class="token comment">// 注册路由和对应函数</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
                                                   
<span class="token keyword">func</span> <span class="token function">table</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                               <span class="token comment">// curl -X &#39;POST&#39; http://localhost:8080/table </span>
    name <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>                             <span class="token comment">// -H &#39;Content-Type: application/x-www-form-urlencoded&#39;</span>
    age <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span>                               <span class="token comment">// -d &#39;name=lily&amp;age=16&#39;</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;name:%s age:%s&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>             <span class="token comment">// name:lily age:16</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json-参数" tabindex="-1"><a class="header-anchor" href="#json-参数" aria-hidden="true">#</a> JSON 参数</h3><p>JSON 数据存储在 POST 请求体中, 请求体 <code>application/json</code>, 获取原始数据后格式化转 map</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    engine<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/raw/&quot;</span><span class="token punctuation">,</span> rawData<span class="token punctuation">)</span>                          <span class="token comment">// 注册路由和对应函数</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
                                                   
<span class="token keyword">func</span> <span class="token function">rawData</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                             <span class="token comment">// curl -X &#39;POST&#39; http://localhost:8080/raw </span>
    data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetRawData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                              <span class="token comment">// -H &#39;Content-Type: application/json&#39;</span>
    <span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any                                   <span class="token comment">// -d &#39;{name:lily, age:16}&#39;</span>
    <span class="token boolean">_</span> <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span>
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;Json: %#v&quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>                          <span class="token comment">// Json: map[string]interface {}{&quot;age&quot;:&quot;14&quot;, &quot;user&quot;:&quot;petter&quot;}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数绑定" tabindex="-1"><a class="header-anchor" href="#参数绑定" aria-hidden="true">#</a> 参数绑定</h3><p>基于请求类型开发接口比较麻烦, 且多种参数都是 <code>key-valuse</code> 形式, 于是有了自适应解析<br> 定义一个结构体, 将请求体字段与结构体属性绑定, 通过 <code>ShouldBind</code> 赋值给结构体属性</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>                                       <span class="token comment">// 结构体属性开头大写, 允许外部使用</span>
    Name <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot; form:&quot;name&quot; binding:&quot;required&quot;\`</span>
    Age  <span class="token builtin">string</span> <span class="token string">\`json:&quot;age&quot; form:&quot;age&quot; binding:&quot;required&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    engine <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    engine<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/model&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// Body {&quot;age&quot;: &quot;16&quot;,&quot;name&quot;: &quot;lily&quot;}</span>
        <span class="token keyword">var</span> p Person
        err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>                            <span class="token comment">// 自适应解析</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">&quot;login fail&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
        c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;login info: %#v&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>               <span class="token comment">// login info: main.Person{Name:&quot;Bob&quot;, Age:&quot;16&quot;}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传" aria-hidden="true">#</a> 文件上传</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,32);function r(d,m){const s=t("ExternalLinkIcon");return p(),o("div",null,[n("p",null,[n("a",l,[e("Gin官网"),c(s)])]),k])}const g=a(u,[["render",r],["__file","go-gin.html.vue"]]);export{g as default};
