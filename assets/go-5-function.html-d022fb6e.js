import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-8da2a3ac.js";const p={},e=t(`<h2 id="function-定义" tabindex="-1"><a class="header-anchor" href="#function-定义" aria-hidden="true">#</a> function 定义</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token operator">&lt;</span>function name<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>parameter name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>parameter <span class="token keyword">type</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">return</span> <span class="token keyword">type</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">&lt;</span>functuion code<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token comment">// 无参数, 无返回值, 对应内容不填</span>
    <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;no parameter and no return&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>                     <span class="token comment">// 参数和类型要对应</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">self</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">// 同类型参数合并, 多返回值, 返回值类型需要括号</span>
    <span class="token keyword">return</span> x<span class="token punctuation">,</span> y
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>func: 函数定义使用的关键字</li><li>function name: 函数名, 同变量使用</li><li>parameter name: 参数名, 参数名与类型成对存在</li><li>parameter type: 参数类型, 多个同类型参数可只写 1 次</li><li>return type: 返回值的类型</li><li>golang 强制规定左花括号必须和 func 同一行</li></ul><h3 id="参数与返回值" tabindex="-1"><a class="header-anchor" href="#参数与返回值" aria-hidden="true">#</a> 参数与返回值</h3><p>golang 允许不定数量的参数<br> golang 允许多个返回值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>                      <span class="token comment">// 设置可变参数, 可变参数通常作为最后一个参数</span>
    res <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>                     <span class="token comment">// 可变参数本质是一个切片</span>
        res <span class="token operator">+=</span> i
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token number">10</span>

<span class="token keyword">func</span> <span class="token function">calc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sum<span class="token punctuation">,</span> sub <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">// 指定多个返回值</span>
    sum <span class="token operator">:=</span> x <span class="token operator">+</span> y
    sub <span class="token operator">=</span> x <span class="token operator">-</span> y
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment">// 多个返回值时, 返回值类型需要带括号 </span>
    <span class="token keyword">return</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数" aria-hidden="true">#</a> 匿名函数</h2><p>golang 允许将函数赋值给变量<br> golang 允许函数不定义名称直接运行</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
average <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token number">7</span>

avg <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>

<span class="token function">Println</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="defer" tabindex="-1"><a class="header-anchor" href="#defer" aria-hidden="true">#</a> defer</h2><p>defer 关键字会将之后语句或函数放到函数结尾运行<br> 多个 defer 语句按照先进后出的顺序执行</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                               <span class="token comment">// 将函数延迟到最后执行</span>
        <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;third print&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;first print&quot;</span><span class="token punctuation">)</span>                       
    <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;second print&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">&gt;</span> first <span class="token builtin">print</span>                                    <span class="token comment">// first second 正常按顺序打印 </span>
<span class="token operator">&gt;</span> second <span class="token builtin">print</span>
<span class="token operator">&gt;</span> third <span class="token builtin">print</span>                                    <span class="token comment">// third 延迟到最后打印</span>

<span class="token keyword">func</span> <span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                   <span class="token comment">// 执行多个 defer 语句</span>
    <span class="token keyword">defer</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;4th&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;3rd&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;2nd&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;1st&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">&gt;</span> 1st                                            <span class="token comment">// 多个 defer 按照先进后出的顺序执行</span>
<span class="token operator">&gt;</span> 2nd
<span class="token operator">&gt;</span> 3rd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","go-5-function.html.vue"]]);export{k as default};
