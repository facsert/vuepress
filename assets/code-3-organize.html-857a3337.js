import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,f as e}from"./app-8da2a3ac.js";const t={},p=e(`<ul><li>模块化</li><li>分离工具代码</li><li>少写代码</li></ul><h2 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h2><p>分离相关性不大的代码, 一个模块做一件事<br> 模块化使得代码易于测试和扩展</p><h2 id="少写代码" tabindex="-1"><a class="header-anchor" href="#少写代码" aria-hidden="true">#</a> 少写代码</h2><p>不要重复造轮子, 复用已有实现</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">unique_list</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">sort_list_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">sort_list_two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

unique_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>raw_list<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># 使用集合的特性消除重复数据(集合每个元素唯一)</span>
sort_list <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>raw_list<span class="token punctuation">)</span>                     <span class="token comment"># 使用库函数排序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分离工具代码" tabindex="-1"><a class="header-anchor" href="#分离工具代码" aria-hidden="true">#</a> 分离工具代码</h2><p>抽离与系统无关的代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">compare_list_average</span><span class="token punctuation">(</span>list_a<span class="token punctuation">,</span> list_b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    a_sum<span class="token punctuation">,</span> a_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>list_a<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> list_a<span class="token punctuation">:</span>
        a_sum <span class="token operator">+=</span> i
    a_average <span class="token operator">=</span> a_sum <span class="token operator">/</span> a_length

    b_sum<span class="token punctuation">,</span> b_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>list_b<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> list_b<span class="token punctuation">:</span>
        b_sum <span class="token operator">+=</span> i
    b_average <span class="token operator">=</span> b_sum <span class="token operator">/</span> b_length

    <span class="token keyword">return</span> a_average <span class="token operator">&gt;</span> b_average


<span class="token keyword">def</span> <span class="token function">average</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span>
    array_sum<span class="token punctuation">,</span> array_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> array<span class="token punctuation">:</span>
        array_sum <span class="token operator">+=</span> i
    <span class="token keyword">return</span> array_sum <span class="token operator">/</span> array_length

<span class="token keyword">def</span> <span class="token function">compare_list_average</span><span class="token punctuation">(</span>list_a<span class="token punctuation">,</span> list_b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    a_average <span class="token operator">=</span> average<span class="token punctuation">(</span>list_a<span class="token punctuation">)</span>
    b_average <span class="token operator">=</span> average<span class="token punctuation">(</span>list_b<span class="token punctuation">)</span>
    <span class="token keyword">return</span> a_average <span class="token operator">&gt;</span> a_average
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h1><h2 id="函数式编程" tabindex="-1"><a class="header-anchor" href="#函数式编程" aria-hidden="true">#</a> 函数式编程</h2><p>简单说，&quot;函数式编程&quot;是一种&quot;编程范式&quot;（programming paradigm），也就是如何编写程序的方法论<br> 它属于&quot;结构化编程&quot;的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用</p><h3 id="只用表达式不用语句" tabindex="-1"><a class="header-anchor" href="#只用表达式不用语句" aria-hidden="true">#</a> 只用表达式不用语句</h3><p>每一步都是计算, 都有返回值</p><h3 id="无副作用-不改变外部变量" tabindex="-1"><a class="header-anchor" href="#无副作用-不改变外部变量" aria-hidden="true">#</a> 无副作用, 不改变外部变量</h3><p>不改变外部变量或状态</p><h3 id="纯函数-参数与返回值一一对应" tabindex="-1"><a class="header-anchor" href="#纯函数-参数与返回值一一对应" aria-hidden="true">#</a> 纯函数, 参数与返回值一一对应</h3><p>相同输入输出必定相同</p><h2 id="solid-原则" tabindex="-1"><a class="header-anchor" href="#solid-原则" aria-hidden="true">#</a> SOLID 原则</h2><p>SOLID 是面向对象编程应当遵守的准则和最佳的实践方向</p><h3 id="srp-单一职责" tabindex="-1"><a class="header-anchor" href="#srp-单一职责" aria-hidden="true">#</a> SRP 单一职责</h3><blockquote><p>Single Responsibility Principle<br> There should never be more than one reason for a class to change</p></blockquote><h3 id="ocp-开闭原则" tabindex="-1"><a class="header-anchor" href="#ocp-开闭原则" aria-hidden="true">#</a> OCP 开闭原则</h3><p>原始定义:</p><blockquote><p>Open Closed Principle</p></blockquote><h3 id="lsp-里式替换原则" tabindex="-1"><a class="header-anchor" href="#lsp-里式替换原则" aria-hidden="true">#</a> LSP 里式替换原则</h3><blockquote><p>Liskov Substitution Principle</p></blockquote><h3 id="isp-接口替换原则" tabindex="-1"><a class="header-anchor" href="#isp-接口替换原则" aria-hidden="true">#</a> ISP 接口替换原则</h3><blockquote><p>Interface Segregation Principle</p></blockquote><h3 id="dip-依赖倒置原则" tabindex="-1"><a class="header-anchor" href="#dip-依赖倒置原则" aria-hidden="true">#</a> DIP 依赖倒置原则</h3><blockquote><p>Dependency Inversion Principle</p></blockquote>`,31),i=[p];function o(l,c){return a(),s("div",null,i)}const d=n(t,[["render",o],["__file","code-3-organize.html.vue"]]);export{d as default};
