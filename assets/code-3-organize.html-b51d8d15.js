const e=JSON.parse('{"key":"v-b49a21f6","path":"/Code/code-3-organize.html","title":"组织设计","lang":"en-US","frontmatter":{"title":"组织设计","description":"模块化 分离工具代码 少写代码 模块化 分离相关性不大的代码, 一个模块做一件事 模块化使得代码易于测试和扩展 少写代码 不要重复造轮子, 复用已有实现 def unique_list(array): pass def sort_list_one(): pass def sort_list_two(): pass unique_list = list(set(raw_list)) # 使用集合的特性消除重复数据(集合每个元素唯一) sort_list = sorted(raw_list) # 使用库函数排序","date":"2022-11-04T21:27:49.000Z","categorie":["代码艺术"],"tag":["Code"],"head":[["meta",{"property":"og:url","content":"https://facsert.github.io/Code/code-3-organize.html"}],["meta",{"property":"og:site_name","content":"Facsert"}],["meta",{"property":"og:title","content":"组织设计"}],["meta",{"property":"og:description","content":"模块化 分离工具代码 少写代码 模块化 分离相关性不大的代码, 一个模块做一件事 模块化使得代码易于测试和扩展 少写代码 不要重复造轮子, 复用已有实现 def unique_list(array): pass def sort_list_one(): pass def sort_list_two(): pass unique_list = list(set(raw_list)) # 使用集合的特性消除重复数据(集合每个元素唯一) sort_list = sorted(raw_list) # 使用库函数排序"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-09-03T14:38:24.000Z"}],["meta",{"property":"article:author","content":"Facsert"}],["meta",{"property":"article:tag","content":"Code"}],["meta",{"property":"article:published_time","content":"2022-11-04T21:27:49.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-03T14:38:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组织设计\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-04T21:27:49.000Z\\",\\"dateModified\\":\\"2023-09-03T14:38:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Facsert\\",\\"url\\":\\"https://facsert.github.io\\",\\"email\\":\\"facsert@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"模块化","slug":"模块化","link":"#模块化","children":[]},{"level":2,"title":"少写代码","slug":"少写代码","link":"#少写代码","children":[]},{"level":2,"title":"分离工具代码","slug":"分离工具代码","link":"#分离工具代码","children":[]},{"level":2,"title":"函数式编程","slug":"函数式编程","link":"#函数式编程","children":[{"level":3,"title":"只用表达式不用语句","slug":"只用表达式不用语句","link":"#只用表达式不用语句","children":[]},{"level":3,"title":"无副作用, 不改变外部变量","slug":"无副作用-不改变外部变量","link":"#无副作用-不改变外部变量","children":[]},{"level":3,"title":"纯函数, 参数与返回值一一对应","slug":"纯函数-参数与返回值一一对应","link":"#纯函数-参数与返回值一一对应","children":[]}]},{"level":2,"title":"SOLID 原则","slug":"solid-原则","link":"#solid-原则","children":[{"level":3,"title":"SRP 单一职责","slug":"srp-单一职责","link":"#srp-单一职责","children":[]},{"level":3,"title":"OCP 开闭原则","slug":"ocp-开闭原则","link":"#ocp-开闭原则","children":[]},{"level":3,"title":"LSP 里式替换原则","slug":"lsp-里式替换原则","link":"#lsp-里式替换原则","children":[]},{"level":3,"title":"ISP 接口替换原则","slug":"isp-接口替换原则","link":"#isp-接口替换原则","children":[]},{"level":3,"title":"DIP 依赖倒置原则","slug":"dip-依赖倒置原则","link":"#dip-依赖倒置原则","children":[]}]}],"git":{"createdTime":1693751904000,"updatedTime":1693751904000,"contributors":[{"name":"facser","email":"facsert@outlook.com","commits":1}]},"readingTime":{"minutes":1.47,"words":442},"filePathRelative":"Code/code-3-organize.md","localizedDate":"November 4, 2022","excerpt":"<ul>\\n<li>模块化</li>\\n<li>分离工具代码</li>\\n<li>少写代码</li>\\n</ul>\\n<h2> 模块化</h2>\\n<p>分离相关性不大的代码, 一个模块做一件事<br>\\n模块化使得代码易于测试和扩展</p>\\n<h2> 少写代码</h2>\\n<p>不要重复造轮子, 复用已有实现</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code>\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">unique_list</span><span class=\\"token punctuation\\">(</span>array<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">pass</span>\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">sort_list_one</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">pass</span>\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">sort_list_two</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">pass</span>\\n\\nunique_list <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">list</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">set</span><span class=\\"token punctuation\\">(</span>raw_list<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>                <span class=\\"token comment\\"># 使用集合的特性消除重复数据(集合每个元素唯一)</span>\\nsort_list <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">sorted</span><span class=\\"token punctuation\\">(</span>raw_list<span class=\\"token punctuation\\">)</span>                     <span class=\\"token comment\\"># 使用库函数排序</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
