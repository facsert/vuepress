import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t,f as e}from"./app-8da2a3ac.js";const p={},o=e(`<h2 id="引申" tabindex="-1"><a class="header-anchor" href="#引申" aria-hidden="true">#</a> 引申</h2><p>开发的时候用到 logging 模块, 重新封装后发现使用有点麻烦</p><ol><li>多个模块都会用到该模块, logging 多次实例化会导致重复打印</li><li>使用前需要先获取对象, 无法直接使用其方法</li><li>只能实例化一次, 导致模块间使用需要频繁传递该对象</li></ol><p>综上我在思考能否 import 后直接使用, 且不会多次实例化<br> 通过查询资料了解到<strong>类方法</strong>和<strong>静态方法</strong></p><p>注: logging 模块可以统一输出格式, 打印在窗口并写入指定文件</p><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h2><table><thead><tr><th style="text-align:center;">方法类型</th><th style="text-align:center;">参数</th><th style="text-align:center;">装饰器</th></tr></thead><tbody><tr><td style="text-align:center;">实例方法</td><td style="text-align:center;"><code>self</code></td><td style="text-align:center;">无</td></tr><tr><td style="text-align:center;">类方法</td><td style="text-align:center;"><code>cls</code></td><td style="text-align:center;"><code>@classmethod</code></td></tr><tr><td style="text-align:center;">静态方法</td><td style="text-align:center;">无</td><td style="text-align:center;"><code>@staticmehtod</code></td></tr></tbody></table><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">obj_func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                          <span class="token comment"># 实例方法</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;obj function: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">}</span></span><span class="token string"> \\n&#39;</span></span><span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@classmethod</span>                                 <span class="token comment"># 类方法</span>
    <span class="token keyword">def</span> <span class="token function">class_func</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;class function: </span><span class="token interpolation"><span class="token punctuation">{</span>cls<span class="token punctuation">}</span></span><span class="token string"> \\n&#39;</span></span><span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@staticmethod</span>                                <span class="token comment"># 静态方法</span>
    <span class="token keyword">def</span> <span class="token function">static_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;static function&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main&#39;</span><span class="token punctuation">:</span>
    facser <span class="token operator">=</span> People<span class="token punctuation">(</span><span class="token punctuation">)</span>
    facser<span class="token punctuation">.</span>obj_func<span class="token punctuation">(</span><span class="token punctuation">)</span>
    facser<span class="token punctuation">.</span>class_func<span class="token punctuation">(</span><span class="token punctuation">)</span>
    facser<span class="token punctuation">.</span>static_func<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> <span class="token operator">&gt;</span> obj function<span class="token punctuation">:</span> <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>People <span class="token builtin">object</span> at <span class="token number">0x000002673D477CA0</span><span class="token operator">&gt;</span>
 <span class="token operator">&gt;</span>
 <span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">function</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;__main__.People&#39;</span><span class="token operator">&gt;</span>
 <span class="token operator">&gt;</span>
 <span class="token operator">&gt;</span> static function
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法" aria-hidden="true">#</a> 实例方法</h2><p>最常见的方法, 方法的第一个参数为 <code>self</code>, 表示实例对象<br> 通过 <code>self</code> 即可调用实例对象属性和方法</p><h3 id="实例可用范围" tabindex="-1"><a class="header-anchor" href="#实例可用范围" aria-hidden="true">#</a> 实例可用范围</h3><p>实例化对象可以使用哪些属性和方法 ?</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">:</span>
    
    name <span class="token operator">=</span> <span class="token string">&#39;kertory&#39;</span>                             <span class="token comment"># 定义类属性 name</span>
    
    <span class="token keyword">def</span> <span class="token function">obj_func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;obj func: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>          <span class="token comment"># 打印对象属性 name</span>

    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">class_func</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;class func: </span><span class="token interpolation"><span class="token punctuation">{</span>cls<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>         <span class="token comment"># 打印类属性 name</span>

    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">static_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                           <span class="token comment"># 静态方法</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;static function&#39;</span><span class="token punctuation">)</span>   

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main&#39;</span><span class="token punctuation">:</span>
    facser <span class="token operator">=</span> People<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment"># 类实例化成对象 facser</span>
    facser<span class="token punctuation">.</span>obj_func<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment"># facser 对象调用实例化方法</span>
    facser<span class="token punctuation">.</span>class_func<span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment"># facser 对象调用类方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> <span class="token operator">&gt;</span> obj func<span class="token punctuation">:</span> kertory                             <span class="token comment"># 实例方法打印</span>
 <span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">func</span><span class="token punctuation">:</span> kertory                           <span class="token comment"># 类方法打印</span>
 <span class="token operator">&gt;</span> static function                               <span class="token comment"># 静态方法打印</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例化对象继承了类的属性<br> 实例化对象是可以调用<strong>类方法</strong>和<strong>静态方法</strong>的</p><h2 id="类方法" tabindex="-1"><a class="header-anchor" href="#类方法" aria-hidden="true">#</a> 类方法</h2><p>类方法需要在定义时添加 <code>@classmethod</code> 装饰器, 参数第一个 <code>cls</code> 表示类本身</p><h3 id="类可用范围" tabindex="-1"><a class="header-anchor" href="#类可用范围" aria-hidden="true">#</a> 类可用范围</h3><p>类可以使用哪些属性和方法 ?</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">:</span>
    
    name <span class="token operator">=</span> <span class="token string">&#39;kertory&#39;</span>                             <span class="token comment"># 定义类属性 name</span>
    
    <span class="token keyword">def</span> <span class="token function">obj_func</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;obj func: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>          <span class="token comment"># 打印对象属性 name</span>

    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">class_func</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;class func: </span><span class="token interpolation"><span class="token punctuation">{</span>cls<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>         <span class="token comment"># 打印类属性 name</span>

    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">static_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                           <span class="token comment"># 静态方法</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;static function&#39;</span><span class="token punctuation">)</span>   

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main&#39;</span><span class="token punctuation">:</span>
    People<span class="token punctuation">.</span>class_func<span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment"># 类调用类方法</span>
    People<span class="token punctuation">.</span>static_func<span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment"># 类调用静态方法</span>
    People<span class="token punctuation">.</span>obj_func<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment"># 类调用实例方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> <span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">func</span><span class="token punctuation">:</span> kertory                           <span class="token comment"># 成功执行类方法</span>
 <span class="token operator">&gt;</span>
 <span class="token operator">&gt;</span> static function                               <span class="token comment"># 成功执行静态方法</span>
 <span class="token operator">&gt;</span> Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
 <span class="token operator">&gt;</span>  File <span class="token string">&quot;E:\\文档\\Python\\python_class.py&quot;</span><span class="token punctuation">,</span> line <span class="token number">36</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
 <span class="token operator">&gt;</span>    People<span class="token punctuation">.</span>obj_func<span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token operator">&gt;</span> TypeError<span class="token punctuation">:</span> obj_func<span class="token punctuation">(</span><span class="token punctuation">)</span> missing <span class="token number">1</span> required positional argument<span class="token punctuation">:</span> <span class="token string">&#39;self&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类可以使用类方法, 类属性和静态方法<br> 类无法使用实例属性和实例方法, 后两者须实例化后才能使用</p><h2 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法" aria-hidden="true">#</a> 静态方法</h2><p>静态方法需要在定义时添加 <code>@staticmethod</code> 装饰器<br> 静态方法无法调用类或者实例化对象的属性和方法, 仅是一个普通函数</p><h2 id="总结和实践" tabindex="-1"><a class="header-anchor" href="#总结和实践" aria-hidden="true">#</a> 总结和实践</h2><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>静态方法属于类, 却无法使用类的属性和方法, 可以被类与对象使用</li><li>类方法可调用类属性, 类方法和静态方法, 可以被类与对象使用</li><li>实例化方法可调用类内所有属性方法, 但只可以被实例化对象使用</li></ul><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:left;">可用范围</th></tr></thead><tbody><tr><td style="text-align:center;">类</td><td style="text-align:left;">类方法, 类属性; 静态方法</td></tr><tr><td style="text-align:center;">对象</td><td style="text-align:left;">实例方法, 实例属性; 类方法, 类属性; 静态方法</td></tr></tbody></table><h3 id="logging-实践" tabindex="-1"><a class="header-anchor" href="#logging-实践" aria-hidden="true">#</a> logging 实践</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">class</span> <span class="token class-name">logger</span><span class="token punctuation">:</span>
    
    obj_log <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>                          <span class="token comment"># 定义类方法, 类可以直接使用</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            cls<span class="token punctuation">.</span>obj_log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>                <span class="token comment"># 正常执行, 表示 logger 类已创建</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> <span class="token keyword">_</span><span class="token punctuation">:</span>
            cls<span class="token punctuation">.</span>create_logger<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 执行失败则创建 logger 类后执行</span>
            cls<span class="token punctuation">.</span>obj_log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
        <span class="token keyword">return</span> msg

    <span class="token keyword">def</span> <span class="token function">terminal_handle</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment"># 设置窗口打印格式 </span>
        <span class="token keyword">pass</span>
 
    <span class="token keyword">def</span> <span class="token function">file_handle</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token comment"># 设置文本写入打印格式 </span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">create_logger</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>                      <span class="token comment"># 自定义 logger 对象, 赋值给类属性 obj_log</span>
        cls<span class="token punctuation">.</span>obj_log <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>
        cls<span class="token punctuation">.</span>terminal_handle<span class="token punctuation">(</span><span class="token punctuation">)</span>
        cls<span class="token punctuation">.</span>file_handle<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过类方法解决开头的难点</p><ol><li>仅 <code>create</code> 一次即可, 实例化对象保存在类属性 <code>obj_log</code> 中</li><li>无需实例化封装对象, <code>import</code> 后使用类方法即可</li><li>无需传递对象, 仅 <code>import</code> 即可使用</li></ol>`,34);function c(l,i){return s(),a("div",null,[t(`
 * @FilePath: \\文档\\Learning\\python\\python-class.md
 * @Author: facser
 * @Date: 2022-07-24 12:08:37
 * @LastEditTime: 2022-07-24 19:00:39
 * @LastEditors: facser
 * @Description: 
`),o])}const d=n(p,[["render",c],["__file","python-class-method.html.vue"]]);export{d as default};
