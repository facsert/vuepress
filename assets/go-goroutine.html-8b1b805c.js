import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-8da2a3ac.js";const t={},e=p(`<h2 id="协程" tabindex="-1"><a class="header-anchor" href="#协程" aria-hidden="true">#</a> 协程</h2><p>golang 支持并发和并行, 可以同时跑多个协程<br> golang 使用 <code>go &lt;function name&gt;()</code> 创建并执行协程<br> 协程本质是一个函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token punctuation">.</span> <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;time&quot;</span>
    <span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup                            <span class="token comment">// 定义 wg 辅助协程计数和执行</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                          <span class="token comment">// 执行前打印时间</span>

    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                                    <span class="token comment">// 标记需要执行两个协程</span>
    <span class="token keyword">go</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment">// 新建协程, 类似于将 cook 放后台执行, main 直接接执行下一行    </span>
    <span class="token keyword">go</span> <span class="token function">wash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment">// 新建协程, 类似于将 wash 放后台执行, main 直接接执行下一行  </span>

    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment">// 等待所有的协程执行完成</span>
    <span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                          <span class="token comment">// 所有协程执行完后打印时间</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>                  <span class="token comment">// sleep 3s</span>
    <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;cook by machine use 3s&quot;</span><span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment">// 标记协程执行完毕</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">wash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;wash colse by machine use 2s&quot;</span><span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">&gt;</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">51</span><span class="token punctuation">:</span><span class="token number">20.692681383</span> <span class="token operator">+</span><span class="token number">0800</span> CST m<span class="token operator">=</span><span class="token operator">+</span><span class="token number">0.000016384</span>
<span class="token operator">&gt;</span> wash colse by machine use 2s
<span class="token operator">&gt;</span> cook by machine use 3s
<span class="token operator">&gt;</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">51</span><span class="token punctuation">:</span><span class="token number">23.693482859</span> <span class="token operator">+</span><span class="token number">0800</span> CST m<span class="token operator">=</span><span class="token operator">+</span><span class="token number">3.000817861</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>golang 通过新建 2 个协程同时跑 main cook wash 函数, 3 个函数并行执行共花费 3s.<br> main 也是一个协程, main 中若不设置 wg.Wait() 等待其余协程完成, main 执行完成后会关闭所有协程</p><h2 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> channel</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="无缓冲通道" tabindex="-1"><a class="header-anchor" href="#无缓冲通道" aria-hidden="true">#</a> 无缓冲通道</h3><p>通道容量为 0, 不能存值, 发送语句和结束语句需要都执行, 否则一方会一直等待另一方导致阻塞<br> 发送语句先执行, 则发送语句阻塞, 等待接收语句执行<br> 接受语句先执行, 则接受语句阻塞, 等待发送语句执行<br> 以上特性常用于协程同步, 无缓冲通道也被称为同步通道</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token punctuation">.</span> <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;time&quot;</span>
    <span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;start at %v\\n&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                      <span class="token comment">// 初始化通道, 设置缓冲容量为 0</span>
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                                     
    <span class="token keyword">go</span> <span class="token function">receive</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                               <span class="token comment">// 创建协程</span>
    ch <span class="token operator">&lt;-</span> <span class="token number">3</span>                                      <span class="token comment">// 向通道写入数据, 等待接收语句执行, 数据接收后执行下一句</span>
    <span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;send at %v\\n&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">receive</span><span class="token punctuation">(</span>c <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
    rec <span class="token operator">:=</span> <span class="token operator">&lt;-</span> c                                  <span class="token comment">// 接收通道数据, 若先执行则等待发送语句执行</span>
    <span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;receive %d at %v\\n&quot;</span><span class="token punctuation">,</span> rec<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 发送和接收执行同步</span>
    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">&gt;</span> start at <span class="token number">2023</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">52</span><span class="token punctuation">:</span><span class="token number">35.842840438</span> <span class="token operator">+</span><span class="token number">0800</span> CST m<span class="token operator">=</span><span class="token operator">+</span><span class="token number">0.000018823</span>
<span class="token operator">&gt;</span> receive <span class="token number">3</span> at <span class="token number">2023</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">52</span><span class="token punctuation">:</span><span class="token number">37.843993741</span> <span class="token operator">+</span><span class="token number">0800</span> CST m<span class="token operator">=</span><span class="token operator">+</span><span class="token number">2.001172157</span>
<span class="token operator">&gt;</span> send at <span class="token number">2023</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">22</span><span class="token punctuation">:</span><span class="token number">52</span><span class="token punctuation">:</span><span class="token number">37.844102485</span> <span class="token operator">+</span><span class="token number">0800</span> CST m<span class="token operator">=</span><span class="token operator">+</span><span class="token number">2.001280900</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有缓冲通道" tabindex="-1"><a class="header-anchor" href="#有缓冲通道" aria-hidden="true">#</a> 有缓冲通道</h3><p>通道容量大于 0, 通道允许在容量未满时存值, 容量存满时变成无缓冲通道</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token punctuation">.</span> <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;time&quot;</span>
    <span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;start at %v\\n&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                      <span class="token comment">// 初始化通道, 设置缓冲容量为 2 </span>
    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                                     
    <span class="token keyword">go</span> <span class="token function">receive</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                               <span class="token comment">// 创建协程接收通道的值</span>
    <span class="token keyword">go</span> <span class="token function">send</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                                  <span class="token comment">// 创建协程向通道传值</span>
    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;over at %v\\n&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">send</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ch <span class="token operator">&lt;-</span> <span class="token number">1</span>
    ch <span class="token operator">&lt;-</span> <span class="token number">2</span>
    <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                                    <span class="token comment">// 向通道传值结束后关闭通道</span>
    <span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;send 1,2 at %v\\n&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">receive</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>
    rec <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">{</span>                          <span class="token comment">// 通道关闭后, 使用 range 读取通道值</span>
        rec <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>rec<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;receive %v at %v\\n&quot;</span><span class="token punctuation">,</span> rec<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 发送和接收执行同步</span>
    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">&gt;</span> start at <span class="token number">2023</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">34.69317803</span> <span class="token operator">+</span><span class="token number">0800</span> CST m<span class="token operator">=</span><span class="token operator">+</span><span class="token number">0.000016435</span>
<span class="token operator">&gt;</span> send <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span> at <span class="token number">2023</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">34.693231007</span> <span class="token operator">+</span><span class="token number">0800</span> CST m<span class="token operator">=</span><span class="token operator">+</span><span class="token number">0.000069413</span>
<span class="token operator">&gt;</span> receive <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> at <span class="token number">2023</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">35.693311209</span> <span class="token operator">+</span><span class="token number">0800</span> CST m<span class="token operator">=</span><span class="token operator">+</span><span class="token number">1.000149614</span>
<span class="token operator">&gt;</span> over at <span class="token number">2023</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">35.693371227</span> <span class="token operator">+</span><span class="token number">0800</span> CST m<span class="token operator">=</span><span class="token operator">+</span><span class="token number">1.000209634</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","go-goroutine.html.vue"]]);export{r as default};
