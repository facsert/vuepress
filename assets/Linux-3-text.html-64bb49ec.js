import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c,a as s,b as n,e,f as t}from"./app-8da2a3ac.js";const r={},i=s("h2",{id:"文本搜索",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#文本搜索","aria-hidden":"true"},"#"),n(" 文本搜索")],-1),d=s("p",null,"读取文本内容搜索或刷选符合条件的内容",-1),k={id:"grep",tabindex:"-1"},m=s("a",{class:"header-anchor",href:"#grep","aria-hidden":"true"},"#",-1),u={href:"https://linux.alianga.com/c/grep.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<blockquote><p>global search regular expression and print out the line</p></blockquote><p>文本搜索和筛选</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">grep</span> <span class="token operator">&lt;</span>patten<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>                          <span class="token comment"># 从文件中筛选出符合模式的行, 可搜索多个文件</span>
 $ <span class="token function">egrep</span> <span class="token operator">&lt;</span>regex<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>                          <span class="token comment"># 与 grep -E 类似</span>

 $ <span class="token function">grep</span> <span class="token string">&quot;3r&quot;</span> host.txt                            <span class="token comment"># grep 会显示所有包含 “3r” 的行</span>
 <span class="token operator">&gt;</span> 3rd

 $ <span class="token function">cat</span> host.txt <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;3r&quot;</span>                      <span class="token comment"># 与上述命令效果一致</span>
 <span class="token operator">&gt;</span> 3rd

 $ <span class="token function">grep</span> <span class="token parameter variable">-nE</span> <span class="token string">&quot;[0-9]th&quot;</span> host.txt                   <span class="token comment"># 通过正则表达式匹配, 并显示行</span>
 <span class="token operator">&gt;</span> <span class="token number">4</span>:4th
 <span class="token operator">&gt;</span> <span class="token number">5</span>:5th
 
 $ <span class="token function">cat</span> host.txt <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;[0-9]TH&quot;</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token number">5</span> <span class="token comment"># 多次管道筛选行, egrep 与 grep -E 一致</span>
 <span class="token operator">&gt;</span> 4th                                           <span class="token comment"># 通过正则忽略大小写筛选, 去除包含 5 的行 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">parameter</th><th style="text-align:left;">meaning</th></tr></thead><tbody><tr><td style="text-align:center;"><code>c</code></td><td style="text-align:left;"><code>--count</code> 只显示匹配行的数量</td></tr><tr><td style="text-align:center;"><code>E</code></td><td style="text-align:left;"><code>--extend-regexp</code> 使用正则匹配</td></tr><tr><td style="text-align:center;"><code>i</code></td><td style="text-align:left;"><code>--ignore-case</code> 忽略大小写</td></tr><tr><td style="text-align:center;"><code>o</code></td><td style="text-align:left;"><code>--only-matching</code> 只显示匹配到内容, 同行其它内容不显示</td></tr><tr><td style="text-align:center;"><code>n</code></td><td style="text-align:left;"><code>--line-number</code> 同时显示行数</td></tr><tr><td style="text-align:center;"><code>v</code></td><td style="text-align:left;"><code>--revert-match</code> 反转查找, 显示不匹配的所有行</td></tr><tr><td style="text-align:center;"><code>w</code></td><td style="text-align:left;"><code>--word-regexp</code> 单词全匹配, 存在该单词的行, 不包含子字符串</td></tr><tr><td style="text-align:center;"><code>x</code></td><td style="text-align:left;"><code>--line-regexp</code> 行全匹配, 必须与行完全一致</td></tr></tbody></table>`,4),b={id:"wc",tabindex:"-1"},g=s("a",{class:"header-anchor",href:"#wc","aria-hidden":"true"},"#",-1),h={href:"https://linux.alianga.com/c/wc.html",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>Word count 文字计数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">wc</span> <span class="token parameter variable">-c</span>                                         <span class="token comment"># --bytes char 统计字符数量</span>
 $ <span class="token function">wc</span> <span class="token parameter variable">-w</span>                                         <span class="token comment"># --words 统计单词数量</span>
 $ <span class="token function">wc</span> <span class="token parameter variable">-l</span>                                         <span class="token comment"># --lines 统计行的数量</span>

 $ <span class="token function">cat</span> host.txt <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span>                          <span class="token comment"># wc 是以行尾是否有换行符号判断为一行</span>
 <span class="token operator">&gt;</span> <span class="token number">4</span> host.txt                                    <span class="token comment"># 实际有 5 行, 第 5 行结尾没有换行符号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文本编辑" tabindex="-1"><a class="header-anchor" href="#文本编辑" aria-hidden="true">#</a> 文本编辑</h2>`,3),x={id:"xargs",tabindex:"-1"},$=s("a",{class:"header-anchor",href:"#xargs","aria-hidden":"true"},"#",-1),_={href:"https://linux.alianga.com/c/xargs.html",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>extended arguments: 文本格式转换与扩充</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token operator">&lt;</span>options<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span>         <span class="token comment"># 处理左边命令的输出, 并作为右边命令的输入执行</span>

 $ <span class="token builtin class-name">echo</span> <span class="token string">&quot;end&quot;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;start&quot;</span>               <span class="token comment"># 将 &quot;end&quot; 传递给右边 echo 命令</span>
 <span class="token operator">&gt;</span> start end                                     <span class="token comment"># 与 echo &quot;start&quot; &quot;end&quot; 一致</span>
 
 $ <span class="token function">cat</span> host.txt <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-n</span> <span class="token number">3</span>                     <span class="token comment"># 读取文本内容, 修改格式, 每行 3 个字符串  </span>
 <span class="token operator">&gt;</span> 1st 2nd 3rd                                   <span class="token comment"># xargs 右边不填命令, 默认使用 echo  </span>
 <span class="token operator">&gt;</span> 4th 5th
 
 $ <span class="token builtin class-name">echo</span> <span class="token string">&quot;1-2-3-4&quot;</span> <span class="token operator">|</span> xagrs <span class="token parameter variable">-d</span> <span class="token string">&#39;-&#39;</span> <span class="token parameter variable">-n</span> <span class="token number">2</span>            <span class="token comment"># 以 &#39;-&#39; 分割字符串, 分隔符号可以是单个字符,单个数字或单个字母 </span>
 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token number">2</span>                                           <span class="token comment"># 每行显示两个字符串</span>
 <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token number">4</span>

 $ <span class="token builtin class-name">echo</span> <span class="token string">&quot;1 2 3&quot;</span><span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-i</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;line {} end&quot;</span>              
 <span class="token operator">&gt;</span> line <span class="token number">1</span> end                                    <span class="token comment"># xargs -n 1, 每行一个字符串, 将 1 行分割为 3 行</span>
 <span class="token operator">&gt;</span> line <span class="token number">2</span> end                                    <span class="token comment"># -i 使用 {} 变量替换, 每一行内容替换掉 {} 执行</span>
 <span class="token operator">&gt;</span> line <span class="token number">3</span> end

 $ <span class="token function">cat</span> host.txt <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> num <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;echo num start; echo num end&#39;</span> 
 <span class="token operator">&gt;</span> 1st start                                     <span class="token comment"># -I 设置变量 num(可自定义), 供后续多条命令执行 </span>
 <span class="token operator">&gt;</span> 1st end                                       <span class="token comment"># 执行两次 echo 命令, num 替换为 cat 的输出</span>
 <span class="token operator">&gt;</span> 2nd start
 <span class="token operator">&gt;</span> 2nd end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),y={id:"sort",tabindex:"-1"},w=s("a",{class:"header-anchor",href:"#sort","aria-hidden":"true"},"#",-1),N={href:"https://linux.alianga.com/c/sort.html",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>文本行排序</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">sort</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>                                   <span class="token comment"># 按每行第首字符的 ACSII 码值顺序排序, 相同则往后一个一个比较</span>

 $ <span class="token function">sort</span> host.txt                                 <span class="token comment"># 按每行字符 ACSII 逐个排序</span>
 <span class="token operator">&gt;</span> <span class="token number">128</span>-1st-1                                     <span class="token comment"># 每行开头分别是 1 2 3, 按顺序排序</span>
 <span class="token operator">&gt;</span> <span class="token number">255</span>-3rd-2
 <span class="token operator">&gt;</span> <span class="token number">32</span>-2nd-0
 
 $ <span class="token function">sort</span> <span class="token parameter variable">-n</span> host.txt                              <span class="token comment"># 根据数值比较, 若是字母开头, 按单个字符的 ACSII 数值比较</span>
 <span class="token operator">&gt;</span> <span class="token number">32</span>-2nd-0                                      <span class="token comment"># 每行开头数值是 32 128 255, 根据大小排序</span>
 <span class="token operator">&gt;</span> <span class="token number">128</span>-1st-1                                     <span class="token comment"># 若开头是字符, 按单个字符 ACSII 数值排序</span>
 <span class="token operator">&gt;</span> <span class="token number">255</span>-3rd-2

$ <span class="token function">sort</span> <span class="token parameter variable">-t</span> <span class="token string">&quot;-&quot;</span> <span class="token parameter variable">-k</span> <span class="token number">4</span> <span class="token parameter variable">-n</span> host.txt                   <span class="token comment"># 以 &#39;-&#39; 为分割符号, 取第 4 列按数值排序</span>
 <span class="token operator">&gt;</span> c-32-2nd-0                                    <span class="token comment"># -t &quot;-&quot; 以 - 符号分隔行</span>
 <span class="token operator">&gt;</span> b-128-1st-1                                   <span class="token comment"># -k 取第 4 列</span>
 <span class="token operator">&gt;</span> a-255-3rd-2                                   <span class="token comment"># -n 根据数值排序</span>

 $ <span class="token function">sort</span> <span class="token parameter variable">-r</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>                                <span class="token comment"># --reverse 反向排序</span>
 $ <span class="token function">sort</span> <span class="token parameter variable">-u</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>                                <span class="token comment"># --unique 不显示重复的行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),E={id:"tr",tabindex:"-1"},B=s("a",{class:"header-anchor",href:"#tr","aria-hidden":"true"},"#",-1),F={href:"https://linux.alianga.com/c/tr.html",target:"_blank",rel:"noopener noreferrer"},G=t(`<p>transform 文本替换 压缩 删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">tr</span> <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>parameter<span class="token operator">&gt;</span>                       <span class="token comment"># 文本替换, 删除, 合并相邻重复</span>

 $ <span class="token function">cat</span> host.txt <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">&#39;a-z&#39;</span> <span class="token string">&#39;A-Z&#39;</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">&quot;-&quot;</span> <span class="token string">&quot;=&quot;</span>    <span class="token comment"># 小写全替换为大写, - 替换为 = </span>
 <span class="token operator">&gt;</span> <span class="token assign-left variable">1ST</span><span class="token operator">=</span><span class="token number">1</span>
 <span class="token operator">&gt;</span> <span class="token assign-left variable">2ND</span><span class="token operator">=</span><span class="token number">0</span>
 <span class="token operator">&gt;</span> <span class="token assign-left variable">3RD</span><span class="token operator">=</span><span class="token number">2</span>

 $ <span class="token builtin class-name">echo</span> <span class="token string">&quot;aaccbbcc&quot;</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-s</span> <span class="token string">&#39;ac&#39;</span>                  <span class="token comment"># -s 压缩多个连续 a 或多个连续 c 为 1 个</span>
 <span class="token operator">&gt;</span> acbbc                                         <span class="token comment"># 仅限于单个字符重复, 且相邻重复才会生效</span>
 
 $ <span class="token function">cat</span> host.txt <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;0-9&#39;</span>            <span class="token comment"># 删除文件内所有数字 </span>
 <span class="token operator">&gt;</span> st- nd- rd-                                   <span class="token comment"># -d 后的内容逐一删除, 即删除 0 1 2 3 4 5 6 7 8 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注: tr 替换或删除时把字符集看做<strong>多个字符</strong>进行操作<br> 如 tr -d &#39;abc&#39; 表示删除文本中所有 a b c 字符</p>`,3),R={id:"sed",tabindex:"-1"},S=s("a",{class:"header-anchor",href:"#sed","aria-hidden":"true"},"#",-1),A={href:"https://linux.alianga.com/c/sed.html",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>stream editor 流式编辑</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">sed</span> <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>range<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>model<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
 
 <span class="token operator">&gt;</span> option: 参数
 <span class="token operator">&gt;</span>   -i: <span class="token function">sed</span> 的修改结果写入文件
 <span class="token operator">&gt;</span>   -n: 输出结果, 与 p 合用只打印修改的行
 <span class="token operator">&gt;</span>   -e: 串联多个 <span class="token function">sed</span> 指令

 <span class="token operator">&gt;</span> range: 行号或者正则筛选范围 
 <span class="token operator">&gt;</span>   行号: <span class="token string">&#39;3&#39;</span> 第三行<span class="token punctuation">;</span> <span class="token string">&#39;2,5&#39;</span> <span class="token number">2</span>到5行<span class="token punctuation">;</span> <span class="token string">&#39;1~2&#39;</span> 奇数行<span class="token punctuation">;</span> <span class="token string">&#39;2~2&#39;</span> 偶数行<span class="token punctuation">;</span> 
 <span class="token operator">&gt;</span>   正则: <span class="token string">&#39;/[0-9]/&#39;</span> 含有数字的行<span class="token punctuation">;</span>  <span class="token string">&#39;/1st/,/3rd/&#39;</span> 1st 行和 3rd 之间所有行

 <span class="token operator">&gt;</span> model: 操作模式
 <span class="token operator">&gt;</span>   p: 打印模式
 <span class="token operator">&gt;</span>   d: 删除模式
 <span class="token operator">&gt;</span>   s: 替换模式
 <span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span>g: 与 s 替换模式合用, 标明替换次数 
 <span class="token operator">&gt;</span>   a<span class="token punctuation">\\</span>: 行尾追加
 <span class="token operator">&gt;</span>   i<span class="token punctuation">\\</span>: 行首插入
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>select 筛选</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">sed</span> <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>line index<span class="token operator">&gt;</span> <span class="token function">file</span>                <span class="token comment"># 根据行序号筛选行</span>
 $ <span class="token function">sed</span> <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>regex<span class="token operator">&gt;</span> <span class="token function">file</span>                     <span class="token comment"># 根据关键字筛选行</span>

 $ <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;2,$p&#39;</span> host.txt                        <span class="token comment"># 截取第二行到最后一行 $ 代表最后一行</span>
 <span class="token operator">&gt;</span> 2nd-0                                         <span class="token comment"># 使用 -n 参数和 p 打印符合需求的行</span>
 <span class="token operator">&gt;</span> 3rd-2

 $ <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;/[a-z]d/p&#39;</span> host.txt                   <span class="token comment"># 筛选包含 字母+d 的 行</span>
 <span class="token operator">&gt;</span> 2nd-0
 <span class="token operator">&gt;</span> 3rd-2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>delete 删除</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">sed</span> <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>line index<span class="token operator">&gt;</span> d <span class="token function">file</span>                <span class="token comment"># 根据行序号筛选行</span>
 $ <span class="token function">sed</span> <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>regex<span class="token operator">&gt;</span> d <span class="token function">file</span>                     <span class="token comment"># 根据关键字筛选行 </span>

 $ <span class="token function">sed</span> <span class="token string">&#39;$d&#39;</span> host.txt                               <span class="token comment"># 删除最后一行 </span>
 <span class="token operator">&gt;</span> 1st-1                                           <span class="token comment"># 显示删除后剩余的行, 文件保持不变</span>
 <span class="token operator">&gt;</span> 2nd-0

 $ <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;/0$/d&#39;</span> host.txt                         <span class="token comment"># 删除以 0 为结尾的行</span>
 <span class="token operator">&gt;</span> 1st-1                                           <span class="token comment"># -i 显示删除后剩余的行, 并将修改写入文件</span>
 <span class="token operator">&gt;</span> 3rd-2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>replace 替换</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">sed</span> <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> <span class="token string">&#39;s/&lt;before&gt;/&lt;after&gt;/&lt;n&gt;g&#39;</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> <span class="token comment"># 逐行替换, s 替换模式; &lt;n&gt;g 替换 n 次, n 不填则全替换  </span>

 $ <span class="token builtin class-name">echo</span> <span class="token string">&quot;hi hi ha&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/hi/ha/g&#39;</span>             <span class="token comment"># 将 hi 替换为 ha, n 未填, 全替换</span>
 <span class="token operator">&gt;</span> ha ha ha

 $ <span class="token builtin class-name">echo</span> <span class="token string">&quot;hi hi ha&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s:hi:ha:&#39;</span>              <span class="token comment"># 将 hi 替换为 ha, 没有 g, 只替换一次</span>
 <span class="token operator">&gt;</span> ha hi ha                                      <span class="token comment"># 定界符除了 / 也可以用 : , 或 | </span>

 $ <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/-[0-3]/=end/1g&#39;</span> host.txt <span class="token operator">&amp;&amp;</span> <span class="token function">cat</span> host.txt  
 <span class="token operator">&gt;</span> <span class="token assign-left variable">1st</span><span class="token operator">=</span>end                                       <span class="token comment"># -i, 不显示结果, 将修改写入文件</span>
 <span class="token operator">&gt;</span> <span class="token assign-left variable">2nd</span><span class="token operator">=</span>end                                       <span class="token comment"># 支持正则表达式, 将 -1 -2 -3 都替换为 =end</span>
 <span class="token operator">&gt;</span> <span class="token assign-left variable">3rd</span><span class="token operator">=</span>end                                       <span class="token comment"># 结尾没有 g, 只替换一次</span>

 $ <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;s/nd\\|rd/th/gp&#39;</span> host.txt              <span class="token comment"># -n 和 p 合用打印匹配的行</span>
 <span class="token operator">&gt;</span> 2th-0                                         <span class="token comment"># 将 nd 或 rd 替换为 th</span>
 <span class="token operator">&gt;</span> 3th-2

 $ <span class="token function">sed</span> <span class="token string">&#39;s/.d/(&amp; or th)/g&#39;</span> host.txt               <span class="token comment"># 使用 &amp; 做变量替换</span>
 <span class="token operator">&gt;</span> 1st-1
 <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">(</span>nd or th<span class="token punctuation">)</span>-0
 <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">(</span>rd or th<span class="token punctuation">)</span>-2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>add insert 追加 插入</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">sed</span> <span class="token operator">&lt;</span>option<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>regex<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>a<span class="token punctuation">\\</span> i<span class="token punctuation">\\</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>  <span class="token comment">#</span>

 $ <span class="token function">sed</span> <span class="token string">&#39;/1st/a\\first line&#39;</span> host.txt              <span class="token comment"># 在包含 1st 的行结尾添加 first line </span>
 <span class="token operator">&gt;</span> 1st-1                                         <span class="token comment"># 行结尾是换行符, 追加内容在换行符后, 即下一行</span>
 <span class="token operator">&gt;</span> first line                                    
 <span class="token operator">&gt;</span> 2nd-0
 <span class="token operator">&gt;</span> 3rd-2

 $ <span class="token function">sed</span> <span class="token string">&#39;/1st/1\\first line&#39;</span> host.txt              <span class="token comment"># 在包含 1st 的行开头添加 first line </span>
 <span class="token operator">&gt;</span> first line                                  
 <span class="token operator">&gt;</span> 1st-1                                                             
 <span class="token operator">&gt;</span> 2nd-0
 <span class="token operator">&gt;</span> 3rd-2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),D={id:"awk",tabindex:"-1"},V=s("a",{class:"header-anchor",href:"#awk","aria-hidden":"true"},"#",-1),z={href:"https://linux.alianga.com/c/awk.html",target:"_blank",rel:"noopener noreferrer"},L=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">awk</span> <span class="token string">&#39;BEGIN{ commands } pattern{ commands } END{ commands }&#39;</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>

 <span class="token operator">&gt;</span> BEGIN<span class="token punctuation">{</span> commands <span class="token punctuation">}</span>: 操作文本前执行, 选填, 一般用于初始化变量
 <span class="token operator">&gt;</span> pattern<span class="token punctuation">{</span> commands <span class="token punctuation">}</span>: 行操作, 循环体, 对每行执行
 <span class="token operator">&gt;</span> END<span class="token punctuation">{</span> commands <span class="token punctuation">}</span>: 每次执行完行操作后执行, 选填, 一般用于打印行操作结果

 $ <span class="token function">awk</span> <span class="token string">&#39;BEGIN{i=0} {i++} END{print i}&#39;</span> host.txt  <span class="token comment"># 打印文本行</span>
 <span class="token operator">&gt;</span> <span class="token number">3</span>                                             <span class="token comment"># 初始化 i, 每遍历一行, i + 1, 最后打印 i </span>

 $ <span class="token function">awk</span> <span class="token string">&#39;{print $1, $NF, &quot;index:&quot;NR}&#39;</span> host.txt    <span class="token comment"># 以空格为分隔,打印第 1 列, 最后一列及行序号</span>
 <span class="token operator">&gt;</span> 1st first index:1                             <span class="token comment"># $0 表示整行, $&lt;n&gt; 表示第n列, 未指定分隔符号默认空格为分隔</span>
 <span class="token operator">&gt;</span> 2nd second index:2                            <span class="token comment"># $NF 表示最后一列 $(NF-&lt;N&gt;) 倒数第 n 列</span>
 <span class="token operator">&gt;</span> 3rd third index:3                             <span class="token comment"># NR 表示行序号, 不需要 $ </span>

 $ <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">&#39;=&#39;</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">col</span><span class="token operator">=</span><span class="token variable">$num</span>  <span class="token string">&#39;{print  &quot;line: &quot;NR &quot; column &quot; col&quot;: &quot;  $col}&#39;</span> host.txt     
 <span class="token operator">&gt;</span> line: <span class="token number">1</span> <span class="token function">column</span> <span class="token number">2</span>: <span class="token number">1</span>                           <span class="token comment"># -F &quot;=&quot; 以 = 为分隔符号, 与 &#39;BEGIN{ FS = &quot;=&quot; }&#39; 效果一致</span>
 <span class="token operator">&gt;</span> line: <span class="token number">2</span> <span class="token function">column</span> <span class="token number">2</span>: <span class="token number">0</span>                           <span class="token comment"># -v col=$num 从外部添加变量赋值给 col</span>
 <span class="token operator">&gt;</span> line: <span class="token number">3</span> <span class="token function">column</span> <span class="token number">2</span>: <span class="token number">2</span>                           <span class="token comment"># &quot;&quot; 内容打印, 变量自动替换, $&lt;n&gt; 取第 n 列</span>

 /dev/sda1  234G  191G   31G  <span class="token number">87</span>%   /
 <span class="token operator">|</span>-------<span class="token operator">|</span>  <span class="token operator">|</span>--<span class="token operator">|</span>  <span class="token operator">|</span>--<span class="token operator">|</span>   <span class="token operator">|</span>--<span class="token operator">|</span> <span class="token operator">|</span>-<span class="token operator">|</span> <span class="token operator">|</span>--------<span class="token operator">|</span> 
    <span class="token variable">$1</span>       <span class="token variable">$2</span>    <span class="token variable">$3</span>     <span class="token variable">$4</span>   <span class="token variable">$5</span>  <span class="token variable">$6</span> <span class="token punctuation">(</span><span class="token variable">$NF</span><span class="token punctuation">)</span>   NR: line index
 <span class="token operator">|</span>-----------------------------------------<span class="token operator">|</span>
                    <span class="token variable">$0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>select 筛选</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">awk</span> <span class="token operator">&lt;</span>pattern<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token builtin class-name">command</span> <span class="token punctuation">}</span>

 $ <span class="token function">awk</span> <span class="token string">&#39;NR%2==1, $3 ~ /ir/ {print $0}&#39;</span> host.txt  <span class="token comment"># 通过表达式筛选符合条件的行</span>
 <span class="token operator">&gt;</span> 1st <span class="token number">1</span> first                                   <span class="token comment"># NR%2 == 1, 行序号为 2 的倍数余 1 , 即奇数行</span>
 <span class="token operator">&gt;</span> 3rd <span class="token number">2</span> third                                   <span class="token comment"># $3 ~ /ir/ 即第 3 列包含 ir 字符串</span>

 $ <span class="token function">awk</span> <span class="token string">&#39;$1 !~ /nd/, /^[1-3]/ {print}&#39;</span> host.txt   <span class="token comment"># 使用正则筛选行</span>
 <span class="token operator">&gt;</span> 1st <span class="token number">1</span> first                                   <span class="token comment"># $1 !~ /nd/ 第 1 列不包含 nd 字符串</span>
 <span class="token operator">&gt;</span> 3rd <span class="token number">2</span> third                                   <span class="token comment"># ^[1-3] 以数字 1 2 3 为行开头 </span>

 $ <span class="token function">awk</span> <span class="token string">&#39;/sec/, /3rd/ {print}&#39;</span> host.txt           <span class="token comment"># 通过子字符串截取两子字符之间所有的行</span>
 <span class="token operator">&gt;</span> 2nd <span class="token number">0</span> second                                  <span class="token comment"># sec 在第 2 行</span>
 <span class="token operator">&gt;</span> 3rd <span class="token number">2</span> third                                   <span class="token comment"># 3rd 在第 3 行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><table><thead><tr><th style="text-align:center;">char</th><th style="text-align:left;">meaning</th></tr></thead><tbody><tr><td style="text-align:center;"><code>^</code></td><td style="text-align:left;">匹配输入字符串的开始位置, ^start 以字符串 start 开头</td></tr><tr><td style="text-align:center;"><code>$</code></td><td style="text-align:left;">匹配输入字符串的结束位置, $end 以字符串 end 开头</td></tr><tr><td style="text-align:center;"><code>.</code></td><td style="text-align:left;">匹配除&quot;\\n&quot;之外的任何单个字符, .</td></tr><tr><td style="text-align:center;"><code>[]</code></td><td style="text-align:left;">匹配所包含的任意<strong>一个</strong>字符, [fac] 匹配 f a c 中任意单个字符, [a-z] 任意单个小写字母 [0-9] 任意单个数字</td></tr><tr><td style="text-align:center;"><code>[^]</code></td><td style="text-align:left;">负值字符范围。匹配任何不在指定范围内的任意字符, [^fac] 匹配不包含 f a c 中任意单个字符</td></tr><tr><td style="text-align:center;"><code>|</code></td><td style="text-align:left;">或匹配, 符号两边均可 [0-9]|[a-z] 匹配任意单个数字或小写字母</td></tr><tr><td style="text-align:center;"><code>？</code></td><td style="text-align:left;">匹配前面的子表达式零次或一次, [0-9]? 匹配 0 个或 1 个数字</td></tr><tr><td style="text-align:center;"><code>+</code></td><td style="text-align:left;">匹配前面的子表达式一次或多次, [A-Z]+ 匹配 1 个或多个大写字母</td></tr><tr><td style="text-align:center;"><code>*</code></td><td style="text-align:left;">匹配前面的子表达式零次或多次, .*.txt 匹配任意单个字符出现0次或多次, 即表示任意以 .txt 结尾</td></tr><tr><td style="text-align:center;"><code>{m}</code></td><td style="text-align:left;">n是一个非负整数。匹配确定的n次。{3} 固定匹配 3 次</td></tr><tr><td style="text-align:center;"><code>{m,n}</code></td><td style="text-align:left;">m和n均为非负整数，其中n&lt;=m。{1，3} 最少 1 次最多 3 次, {2,} 最少两次, {,4} 最多 4 次</td></tr><tr><td style="text-align:center;"><code>()</code></td><td style="text-align:left;">匹配pattern并获取这一匹配, 将括号内匹配看成一个整体 （[0-9]=)* &quot;数字=&quot; 的格式出现任意次</td></tr></tbody></table><h3 id="正则表达式示例" tabindex="-1"><a class="header-anchor" href="#正则表达式示例" aria-hidden="true">#</a> 正则表达式示例</h3><ul><li>匹配 IPV4</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token builtin class-name">echo</span> <span class="token string">&quot;127.0.0.1 <span class="token entity" title="\\n">\\n</span>255.255.1 <span class="token entity" title="\\n">\\n</span>0.0.0.0 &quot;</span> <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token parameter variable">-o</span> <span class="token string">&quot;([0-9]{1,3}\\.){3}[0-9]{1,3}&quot;</span> 
 <span class="token operator">&gt;</span> <span class="token number">127.0</span>.0.1                                     <span class="token comment"># -o 仅显示匹配内容, [0-9]{1,3} 任意数字出现 1 到 3 次 </span>
 <span class="token operator">&gt;</span> <span class="token number">0.0</span>.0.0                                       <span class="token comment"># ([0-9]{1,3}\\.){3}  匹配格式 3 次, . 经过转义仅表示 . 字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function T(Z,H){const a=p("ExternalLinkIcon");return l(),c("div",null,[i,d,s("h3",k,[m,n(),s("a",u,[n("grep"),e(a)])]),v,s("h3",b,[g,n(),s("a",h,[n("wc"),e(a)])]),f,s("h3",x,[$,n(),s("a",_,[n("xargs"),e(a)])]),q,s("h3",y,[w,n(),s("a",N,[n("sort"),e(a)])]),I,s("h3",E,[B,n(),s("a",F,[n("tr"),e(a)])]),G,s("h3",R,[S,n(),s("a",A,[n("sed"),e(a)])]),C,s("h3",D,[V,n(),s("a",z,[n("awk"),e(a)])]),L])}const j=o(r,[["render",T],["__file","Linux-3-text.html.vue"]]);export{j as default};
