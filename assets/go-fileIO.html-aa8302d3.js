const n=JSON.parse('{"key":"v-1b4b86b0","path":"/Go/modules/go-fileIO.html","title":"Go 文件IO","lang":"en-US","frontmatter":{"title":"Go 文件IO","description":"golang 通过 os 对文件读写 io/ioutil 读写文件调用的是 os 的方法 import ( . \\"fmt\\" \\"io\\" \\"os\\" \\"bufio\\" ) func read(fileName string) string { // 快速读取文件全部内容 content, err := os.ReadFile(fileName) if err != nil { panic(Sprintf(\\"error: %s\\", fileName, err)) } return string(content) } func readLine(fileName string) []string { // 逐行读取文件, 返回字符串切片, 切片元素结尾无换行符号 file, err := os.OpenFile(fileName, os.O_RDONLY, 0666) if err != nil { panic(Sprintf(\\"error: %v\\\\n\\", err)) } defer file.Close() buf := bufio.NewReader(file) content := []string{} for { line, _, err := buf.ReadLine() if err != nil { break } content = append(content, string(line)) } return content } func readByte(fileName string, length int) string { // 每次读取固定长度字符串 file, err := os.OpenFile(fileName, os.O_RDONLY, 0666) if err != nil { panic(Sprintf(\\"error: %v\\\\n\\", err)) } defer file.Close() buf := make([]byte, length) content := []byte{} for { _, err := file.Read(buf) if err != nil { break } content = append(content, buf...) } return string(content) }","date":"2023-03-06T19:23:13.000Z","category":["Go 教程"],"tag":["Go"],"head":[["meta",{"property":"og:url","content":"https://facsert.github.io/Go/modules/go-fileIO.html"}],["meta",{"property":"og:site_name","content":"Facsert"}],["meta",{"property":"og:title","content":"Go 文件IO"}],["meta",{"property":"og:description","content":"golang 通过 os 对文件读写 io/ioutil 读写文件调用的是 os 的方法 import ( . \\"fmt\\" \\"io\\" \\"os\\" \\"bufio\\" ) func read(fileName string) string { // 快速读取文件全部内容 content, err := os.ReadFile(fileName) if err != nil { panic(Sprintf(\\"error: %s\\", fileName, err)) } return string(content) } func readLine(fileName string) []string { // 逐行读取文件, 返回字符串切片, 切片元素结尾无换行符号 file, err := os.OpenFile(fileName, os.O_RDONLY, 0666) if err != nil { panic(Sprintf(\\"error: %v\\\\n\\", err)) } defer file.Close() buf := bufio.NewReader(file) content := []string{} for { line, _, err := buf.ReadLine() if err != nil { break } content = append(content, string(line)) } return content } func readByte(fileName string, length int) string { // 每次读取固定长度字符串 file, err := os.OpenFile(fileName, os.O_RDONLY, 0666) if err != nil { panic(Sprintf(\\"error: %v\\\\n\\", err)) } defer file.Close() buf := make([]byte, length) content := []byte{} for { _, err := file.Read(buf) if err != nil { break } content = append(content, buf...) } return string(content) }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-09-03T14:38:24.000Z"}],["meta",{"property":"article:author","content":"Facsert"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:published_time","content":"2023-03-06T19:23:13.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-03T14:38:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 文件IO\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-06T19:23:13.000Z\\",\\"dateModified\\":\\"2023-09-03T14:38:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Facsert\\",\\"url\\":\\"https://facsert.github.io\\",\\"email\\":\\"facsert@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"write file","slug":"write-file","link":"#write-file","children":[]},{"level":2,"title":"OpenFile 模式","slug":"openfile-模式","link":"#openfile-模式","children":[]}],"git":{"createdTime":1693751904000,"updatedTime":1693751904000,"contributors":[{"name":"facser","email":"facsert@outlook.com","commits":1}]},"readingTime":{"minutes":1.85,"words":556},"filePathRelative":"Go/modules/go-fileIO.md","localizedDate":"March 6, 2023","excerpt":"<p>golang 通过 os 对文件读写<br>\\n<code>io/ioutil</code> 读写文件调用的是 os 的方法</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token punctuation\\">.</span> <span class=\\"token string\\">\\"fmt\\"</span>\\n    <span class=\\"token string\\">\\"io\\"</span>\\n    <span class=\\"token string\\">\\"os\\"</span>\\n    <span class=\\"token string\\">\\"bufio\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span>fileName <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">string</span> <span class=\\"token punctuation\\">{</span>                                  <span class=\\"token comment\\">// 快速读取文件全部内容</span>\\n    content<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> os<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadFile</span><span class=\\"token punctuation\\">(</span>fileName<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">if</span>  err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token function\\">panic</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">Sprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"error: %s\\"</span><span class=\\"token punctuation\\">,</span> fileName<span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">string</span><span class=\\"token punctuation\\">(</span>content<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">readLine</span><span class=\\"token punctuation\\">(</span>fileName <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">string</span> <span class=\\"token punctuation\\">{</span>                            <span class=\\"token comment\\">// 逐行读取文件, 返回字符串切片, 切片元素结尾无换行符号</span>\\n    file<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> os<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">OpenFile</span><span class=\\"token punctuation\\">(</span>fileName<span class=\\"token punctuation\\">,</span> os<span class=\\"token punctuation\\">.</span>O_RDONLY<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0666</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token function\\">panic</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">Sprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"error: %v\\\\n\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">defer</span> file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    buf <span class=\\"token operator\\">:=</span> bufio<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewReader</span><span class=\\"token punctuation\\">(</span>file<span class=\\"token punctuation\\">)</span>\\n    content <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">{</span>\\n        line<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">_</span><span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> buf<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">break</span> <span class=\\"token punctuation\\">}</span>\\n        content <span class=\\"token operator\\">=</span> <span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>content<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">string</span><span class=\\"token punctuation\\">(</span>line<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> content\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">readByte</span><span class=\\"token punctuation\\">(</span>fileName <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> length <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token builtin\\">string</span> <span class=\\"token punctuation\\">{</span>                  <span class=\\"token comment\\">// 每次读取固定长度字符串</span>\\n    file<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> os<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">OpenFile</span><span class=\\"token punctuation\\">(</span>fileName<span class=\\"token punctuation\\">,</span> os<span class=\\"token punctuation\\">.</span>O_RDONLY<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0666</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token function\\">panic</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">Sprintf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"error: %v\\\\n\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">defer</span> file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    buf <span class=\\"token operator\\">:=</span> <span class=\\"token function\\">make</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">byte</span><span class=\\"token punctuation\\">,</span> length<span class=\\"token punctuation\\">)</span>\\n    content <span class=\\"token operator\\">:=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token builtin\\">byte</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token boolean\\">_</span><span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> file<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Read</span><span class=\\"token punctuation\\">(</span>buf<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">break</span> <span class=\\"token punctuation\\">}</span>\\n        content <span class=\\"token operator\\">=</span> <span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>content<span class=\\"token punctuation\\">,</span> buf<span class=\\"token operator\\">...</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">string</span><span class=\\"token punctuation\\">(</span>content<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
