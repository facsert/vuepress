import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as r,a as s,b as e,e as a,f as l}from"./app-8da2a3ac.js";const c={},p=s("h2",{id:"介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),e(" 介绍")],-1),d=s("p",null,"远程仓库是托管在网上的项目版本库, 需要在代码平台上创建, 常见的如",-1),u={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://about.gitlab.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://gitee.com/",target:"_blank",rel:"noopener noreferrer"},h=l(`<p>可以通过两种方式添加远程仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">git</span> clone <span class="token operator">&lt;</span>Repository url<span class="token operator">&gt;</span>                    <span class="token comment"># 克隆远端仓库到本地, 自动绑定链接对应的仓库</span>

 $ <span class="token function">git</span> remote <span class="token parameter variable">-v</span>                                 <span class="token comment"># 查看本地仓库关联的所有远端仓库</span>
 <span class="token operator">&gt;</span> origin  git@github.com:facser/Learning.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>
 <span class="token operator">&gt;</span> origin  git@github.com:facser/Learning.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>

 $ <span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token operator">&lt;</span>Repository url<span class="token operator">&gt;</span>        <span class="token comment"># 将远程仓库命名为 origin 并关联本地仓库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一个本地仓库可以关联多个远程仓库</li><li>本地仓库可以提交代码到任意一个已关联的远程仓库</li><li>使用克隆后, 该远程仓库默认被命名为 origin</li></ul><h2 id="gitignore" tabindex="-1"><a class="header-anchor" href="#gitignore" aria-hidden="true">#</a> .gitignore</h2><p>忽略指定文件, 不对其追踪和提交, 文件名固定为 <code>.gitignore</code>, 项目内可创建<strong>多个</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">cat</span> .gitignore
 <span class="token operator">&gt;</span> *.pyc                                         <span class="token comment"># 忽略当前项目内所有 .pyc 结尾的文件</span>
 <span class="token operator">&gt;</span> <span class="token operator">!</span>main.pyc                                     <span class="token comment"># 强制跟踪所有 main.pyc</span>
 <span class="token operator">&gt;</span> /*.log                                        <span class="token comment"># 忽略当前目录下 .log 结尾文件, 不影响上层的文件</span>
 <span class="token operator">&gt;</span> temp/                                         <span class="token comment"># 忽略整个项目内所有 temp 文件夹</span>
 <span class="token operator">&gt;</span> /lib/*.pyc                                    <span class="token comment"># 忽略当前 lib 目录 下一级的 pyc 文件, lib 下多层目录不受影响  </span>
 <span class="token operator">&gt;</span> lib/**/.pyc                                   <span class="token comment"># 忽略项目内所有 lib 文件夹内的 pyc 文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ssh-key-密钥" tabindex="-1"><a class="header-anchor" href="#ssh-key-密钥" aria-hidden="true">#</a> SSH key 密钥</h2><p>本地仓库推送代码到远端时, git 会要求用户输入用户名和密码, 设置 ssh key 即可<strong>免密码</strong>推送</p><h3 id="生成密钥" tabindex="-1"><a class="header-anchor" href="#生成密钥" aria-hidden="true">#</a> 生成密钥</h3><table><thead><tr><th style="text-align:center;">密钥</th><th style="text-align:center;">linux</th><th style="text-align:center;">windows</th></tr></thead><tbody><tr><td style="text-align:center;">id_rsa (私钥)</td><td style="text-align:center;"><code>/root/.ssh/id_rsa</code></td><td style="text-align:center;"><code>C:\\Users\\&lt;user&gt;\\.ssh</code></td></tr><tr><td style="text-align:center;">id_rsa.pub (公钥)</td><td style="text-align:center;"><code>/root/.ssh/id_rsa.pub</code></td><td style="text-align:center;"><code>C:\\Users\\&lt;user&gt;\\.ssh</code></td></tr></tbody></table><p>生成两个密钥文件, 将<strong>公钥</strong>放到代码托管平台的账号设置中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ ssh-keygen                                    <span class="token comment"># 自动生成密钥</span>
 $ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;key message&quot;</span>            <span class="token comment"># 生成 rsa 类型带 key 注释信息的密钥</span>
 
 $ <span class="token function">cat</span> ~/.ssh/id_rsa.pub                         <span class="token comment"># 公钥以 ssh-rsa 开头, 注释信息结尾</span>
 <span class="token operator">&gt;</span> ssh-rsa xxx<span class="token punctuation">..</span><span class="token punctuation">..</span>xxx key message
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>密钥由系统生成, 放入用户设置, 所以是系统和账户绑定</li><li>系统下的本地仓库推送代码到该账户使用 ssh 链接时即可免密</li></ul>`,13);function b(k,v){const n=i("ExternalLinkIcon");return o(),r("div",null,[p,d,s("ul",null,[s("li",null,[s("a",u,[e("Github"),a(n)])]),s("li",null,[s("a",g,[e("Gitlab"),a(n)])]),s("li",null,[s("a",m,[e("Gitee"),a(n)])])]),h])}const x=t(c,[["render",b],["__file","git-2-remote.html.vue"]]);export{x as default};
