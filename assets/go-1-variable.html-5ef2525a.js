import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-8da2a3ac.js";const t={},o=e(`<h1 id="varibale" tabindex="-1"><a class="header-anchor" href="#varibale" aria-hidden="true">#</a> Varibale</h1><ul><li><a href="#%E5%8F%98%E9%87%8F">变量</a></li><li><a href="#%E5%B8%B8%E9%87%8F">常量</a></li><li><a href="#%E6%89%93%E5%8D%B0">打印</a></li><li><a href="#%E9%99%84%E5%BD%95">附录</a></li></ul><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><ul><li>Go 变量命名要求以字母或下划线开头</li><li>不可以使用 Go 中的 25 <a href="#%E5%85%B3%E9%94%AE%E5%AD%97">关键字</a>及 37 个<a href="#%E4%BF%9D%E7%95%99%E5%AD%97">保留字</a></li><li>变量要求声明类型或使用类型推导</li></ul><h3 id="变量声明" tabindex="-1"><a class="header-anchor" href="#变量声明" aria-hidden="true">#</a> 变量声明</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> <span class="token operator">&lt;</span>variable name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">type</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>             <span class="token comment">// 使用 var 进行变量定义, 最完整的变量定义</span>
<span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">18</span>                                 <span class="token comment">// 声明变量类型并赋值</span>

<span class="token keyword">var</span> <span class="token operator">&lt;</span>variable name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">type</span><span class="token operator">&gt;</span>                       <span class="token comment">// 变量定义, 只定义变量名和类型, 变量默认为对应类型的初始值</span>
<span class="token keyword">var</span> str <span class="token builtin">string</span>                                   <span class="token comment">// 声明变量和类型, 未赋值使用默认值(string 默认值 &quot;&quot;) </span>

<span class="token keyword">var</span> <span class="token operator">&lt;</span><span class="token keyword">type</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>                             <span class="token comment">// 变量定义, 通过值自动推导变量类型</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>                                     <span class="token comment">// 声明变量, 赋值, 并使用类型推导</span>

<span class="token operator">&lt;</span>variable name<span class="token operator">&gt;</span> <span class="token operator">:=</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>                       <span class="token comment">// 变量定义, 通过值自动推导类型, 仅能在函数内部使用</span>
name <span class="token operator">:=</span> <span class="token string">&quot;str&quot;</span>                                    <span class="token comment">// 声明变量, 赋值, 并使用类型推导(仅限于函数内使用)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
   str    <span class="token builtin">string</span>                                 <span class="token comment">// &quot;&quot;    声明变量未赋值, 使用 string 类型默认值 &quot;&quot;</span>
   num    <span class="token builtin">int</span>                                    <span class="token comment">// 0     声明变量未赋值, 使用 int 类型默认值 0</span>
   boolen <span class="token builtin">bool</span>                                   <span class="token comment">// false 声明变量未赋值, 使用 bool 类型默认值 false</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
   str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>                          <span class="token comment">// 批量声明并赋值</span>
   num <span class="token builtin">int</span>    <span class="token operator">=</span> <span class="token number">4</span>
   boolen     <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">)</span>

str<span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span>                           <span class="token comment">// 多个变量声明并赋值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匿名变量" tabindex="-1"><a class="header-anchor" href="#匿名变量" aria-hidden="true">#</a> 匿名变量</h3><p>Go 中存在<strong>未被使用</strong>的变量会报错<br> 使用匿名变量 &quot;_&quot; 处理无需使用的变量</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> name <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;facsert&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> name declared but not used     <span class="token comment">// 变量 name 未使用, 报错</span>

name<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token string">&quot;facsert&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;variable&quot;</span>                 <span class="token comment">// 使用匿名变量, 忽略后一个值 </span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello &quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> hello  facsert

<span class="token keyword">import</span> <span class="token punctuation">{</span>
   <span class="token punctuation">.</span> <span class="token string">&quot;fmt&quot;</span>                                       <span class="token comment">// 使用模块时无需添加模块名称</span>
   <span class="token boolean">_</span> <span class="token string">&quot;os&quot;</span>                                        <span class="token comment">// 引入但未使用的模块, _ 处理后不会报错</span>
<span class="token punctuation">}</span>

<span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>                           <span class="token comment">// 引入时使用 . 使调用 fmt 方法无需添加模块名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h2><p>常量声明时候必须赋值<br> 常量一旦声明就不可变化</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token number">2.7182</span>                                 <span class="token comment">// 常量声明必须要赋值, 且不可更改</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>                                          <span class="token comment">// 快速声明常量, a b 赋值 10</span>
   a <span class="token operator">=</span> <span class="token number">10</span>                                        <span class="token comment">// a = 10</span>
   b                                             <span class="token comment">// a = 10 继承上一个变量的值</span>
   c <span class="token operator">=</span> <span class="token number">5</span>                                         <span class="token comment">// c = 5</span>
   d                                             <span class="token comment">// d = 5</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iota" tabindex="-1"><a class="header-anchor" href="#iota" aria-hidden="true">#</a> iota</h3><p>iota 是定义常量时使用的自增关键字<br> 同 const 定义块互不干扰, 所有注释行和空行全部忽略<br> 从第 1 行开始，iota 从 0 逐行加 1</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
   a <span class="token operator">=</span> <span class="token boolean">iota</span>                                      <span class="token comment">// iota = 0  a = 0</span>
   b                                             <span class="token comment">// iota = 1  b = 1</span>
   c                                             <span class="token comment">// iota = 2  c = 2</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>                                          <span class="token comment">// 变更初始值</span>
   a <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">3</span>                                  <span class="token comment">// iota = 0  a = 3</span>
   b                                             <span class="token comment">// iota = 1  b = 4</span>
   c <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">2</span>                                  <span class="token comment">// iota = 2  c = 4</span>
   d                                             <span class="token comment">// iota = 3  d = 5</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>                                          <span class="token comment">// iota 插值</span>
   a <span class="token operator">=</span> <span class="token boolean">iota</span>                                      <span class="token comment">// iota = 0  a = 0</span>
   b <span class="token operator">=</span> <span class="token number">5</span>                                         <span class="token comment">// iota = 1  b = 5</span>
   c <span class="token operator">=</span> <span class="token boolean">iota</span>                                      <span class="token comment">// iota = 2  c = 2</span>
   d                                             <span class="token comment">// iota = 3  d = 3</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打印" tabindex="-1"><a class="header-anchor" href="#打印" aria-hidden="true">#</a> 打印</h2><ul><li>通过占位符替换值打印</li><li>通过不同占位符可以打印变量不同属性值</li><li>万能占用符 <code>%v</code> (<code>%#v %+v</code> 表示不同打印形式)</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>str<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token builtin">bool</span><span class="token operator">&gt;</span> <span class="token operator">...</span><span class="token punctuation">)</span>   <span class="token comment">// 第一个参数是字符串,后接任意类型值, 占位符需与值数量对应 </span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;common: %v \\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;common&quot;</span><span class="token punctuation">)</span>            <span class="token comment">// 万能占用符, 自动判断类型</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;string: %s \\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span>            <span class="token comment">// 字符串变量占位符</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;char  : %c \\n&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">)</span>                 <span class="token comment">// 单个字符变量占位符, 单个字符用单引号</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;number: %d \\n&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>                   <span class="token comment">// 整形变量占位符 </span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;float : %f \\n&quot;</span><span class="token punctuation">,</span> <span class="token number">2.33</span><span class="token punctuation">)</span>                <span class="token comment">// 浮点型变量占位符</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;bool  : %t \\n&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment">// 布尔值变量占位符</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;point : %p \\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>variable<span class="token punctuation">)</span>           <span class="token comment">// 指针变量占位符</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;variable type: %T \\n&quot;</span><span class="token punctuation">,</span> variable<span class="token punctuation">)</span>     <span class="token comment">// 变量类型占位符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录" aria-hidden="true">#</a> 附录</h2><p>Golang 中存在一些关键字和保留字， 不能作为变量名称</p><h3 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>   <span class="token keyword">break</span>        <span class="token keyword">default</span>      <span class="token keyword">func</span>         <span class="token keyword">interface</span>    <span class="token keyword">select</span>
   <span class="token keyword">case</span>         <span class="token keyword">defer</span>        <span class="token keyword">go</span>           <span class="token keyword">map</span>          <span class="token keyword">struct</span>
   <span class="token keyword">chan</span>         <span class="token keyword">else</span>         <span class="token keyword">goto</span>         <span class="token keyword">package</span>      <span class="token keyword">switch</span>
   <span class="token keyword">const</span>        <span class="token keyword">fallthrough</span>  <span class="token keyword">if</span>           <span class="token keyword">range</span>        <span class="token keyword">type</span>
   <span class="token keyword">continue</span>     <span class="token keyword">for</span>          <span class="token keyword">import</span>       retrun       <span class="token keyword">var</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="保留字" tabindex="-1"><a class="header-anchor" href="#保留字" aria-hidden="true">#</a> 保留字</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>    Constants<span class="token punctuation">:</span>    <span class="token boolean">true</span>  <span class="token boolean">false</span>  <span class="token boolean">iota</span>  <span class="token boolean">nil</span>

        Types<span class="token punctuation">:</span>    <span class="token builtin">int</span>  <span class="token builtin">int8</span>  <span class="token builtin">int16</span>  <span class="token builtin">int32</span>  <span class="token builtin">int64</span>  
                  <span class="token builtin">uint</span>  <span class="token builtin">uint8</span>  <span class="token builtin">uint16</span>  <span class="token builtin">uint32</span>  <span class="token builtin">uint64</span>  <span class="token builtin">uintptr</span>
                  <span class="token builtin">float32</span>  <span class="token builtin">float64</span>  <span class="token builtin">complex128</span>  <span class="token builtin">complex64</span>
                  <span class="token builtin">bool</span>  <span class="token builtin">byte</span>  <span class="token builtin">rune</span>  <span class="token builtin">string</span>  <span class="token builtin">error</span>

    Functions<span class="token punctuation">:</span>   <span class="token builtin">make</span>  <span class="token builtin">len</span>  <span class="token builtin">cap</span>  <span class="token builtin">new</span>  <span class="token builtin">append</span>  <span class="token builtin">copy</span>  <span class="token builtin">close</span>  <span class="token builtin">delete</span>
                 <span class="token builtin">complex</span>  <span class="token builtin">real</span>  <span class="token builtin">imag</span>
                 <span class="token builtin">panic</span>  <span class="token builtin">recover</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),p=[o];function l(i,c){return s(),a("div",null,p)}const d=n(t,[["render",l],["__file","go-1-variable.html.vue"]]);export{d as default};
