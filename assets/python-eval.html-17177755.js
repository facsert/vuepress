const n=JSON.parse(`{"key":"v-032bc3a6","path":"/Python/python-eval.html","title":"Python eval exec","lang":"en-US","frontmatter":{"title":"Python eval exec","icon":"python","description":"eval 使用 eval 能评估字符串转换为表达式, 返回表达式的值 eval(string[, globals: dict[, locals:dict]]) # 后两个参数类型为字典 eval(string, None, None) # 后两个默认参数, 默认值为 None a, b = 1, 2 eval('a + b') # 将字符串转换成表达式 &gt; 3 # 返回表达式的执行结果 variable = -2 eval('abs(variable)') # 使用内置函数 &gt; 2","date":"2022-08-30T22:22:31.000Z","category":["Python 技巧"],"tag":["Python"],"head":[["meta",{"property":"og:url","content":"https://facsert.github.io/Python/python-eval.html"}],["meta",{"property":"og:site_name","content":"Facsert"}],["meta",{"property":"og:title","content":"Python eval exec"}],["meta",{"property":"og:description","content":"eval 使用 eval 能评估字符串转换为表达式, 返回表达式的值 eval(string[, globals: dict[, locals:dict]]) # 后两个参数类型为字典 eval(string, None, None) # 后两个默认参数, 默认值为 None a, b = 1, 2 eval('a + b') # 将字符串转换成表达式 &gt; 3 # 返回表达式的执行结果 variable = -2 eval('abs(variable)') # 使用内置函数 &gt; 2"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-09-03T14:38:24.000Z"}],["meta",{"property":"article:author","content":"Facsert"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:published_time","content":"2022-08-30T22:22:31.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-03T14:38:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python eval exec\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-30T22:22:31.000Z\\",\\"dateModified\\":\\"2023-09-03T14:38:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Facsert\\",\\"url\\":\\"https://facsert.github.io\\",\\"email\\":\\"facsert@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"eval","slug":"eval","link":"#eval","children":[{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"限定范围","slug":"限定范围","link":"#限定范围","children":[]},{"level":3,"title":"安全性","slug":"安全性","link":"#安全性","children":[]}]},{"level":2,"title":"exec","slug":"exec","link":"#exec","children":[{"level":3,"title":"使用","slug":"使用-1","link":"#使用-1","children":[]},{"level":3,"title":"限定范围","slug":"限定范围-1","link":"#限定范围-1","children":[]},{"level":3,"title":"安全性","slug":"安全性-1","link":"#安全性-1","children":[]}]}],"git":{"createdTime":1693751904000,"updatedTime":1693751904000,"contributors":[{"name":"facser","email":"facsert@outlook.com","commits":1}]},"readingTime":{"minutes":1.81,"words":544},"filePathRelative":"Python/python-eval.md","localizedDate":"August 30, 2022","excerpt":"<h2> eval</h2>\\n<h3> 使用</h3>\\n<p>eval 能评估字符串转换为表达式, 返回表达式的值</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code> <span class=\\"token builtin\\">eval</span><span class=\\"token punctuation\\">(</span>string<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">globals</span><span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">dict</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">locals</span><span class=\\"token punctuation\\">:</span><span class=\\"token builtin\\">dict</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>    <span class=\\"token comment\\"># 后两个参数类型为字典</span>\\n <span class=\\"token builtin\\">eval</span><span class=\\"token punctuation\\">(</span>string<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">)</span>                        <span class=\\"token comment\\"># 后两个默认参数, 默认值为 None</span>\\n\\n a<span class=\\"token punctuation\\">,</span> b <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span>\\n <span class=\\"token builtin\\">eval</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'a + b'</span><span class=\\"token punctuation\\">)</span>                                   <span class=\\"token comment\\"># 将字符串转换成表达式</span>\\n <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">3</span>                                             <span class=\\"token comment\\"># 返回表达式的执行结果</span>\\n\\n variable <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">2</span>\\n <span class=\\"token builtin\\">eval</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'abs(variable)'</span><span class=\\"token punctuation\\">)</span>                           <span class=\\"token comment\\"># 使用内置函数</span>\\n <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">2</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
