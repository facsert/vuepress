import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-8da2a3ac.js";const t={},e=p(`<p><a href="#%E6%95%B0%E7%BB%84">数组</a><br><a href="#%E5%88%87%E7%89%87">切片</a></p><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><ul><li>数组是<strong>确定数量</strong>元素的集合, 数组元素类型可以不一致</li><li>数组有容量和长度两个属性 <code>cap() len()</code> 查看数组属性</li><li>数组的长度和容量始终相等 <code>length == capacity</code></li><li>数组元素可以修改, 但是数组长度和容量声明后就不能修改</li><li>数组中未赋值的元素会使用类型的默认值</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>strList <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;hey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;you&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">}</span>      <span class="token comment">// 定义长度为 3 , 元素类型为字符串的数组</span>
strList <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;hey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;you&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">}</span>    <span class="token comment">// 定义元素为字符串的数组, 根据值推断长度和容量</span>

intList <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>                          <span class="token comment">// [1 2 0] 定义容量长度均为 3, 类型为 int 的数组</span>
intList <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>                        <span class="token comment">// [1, 2]  容量和长度均为 2 的 int 数组</span>

intArray <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>                         <span class="token comment">// [1 4 0] 初始化数组, 未定义的值取 0</span>
intArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>                  <span class="token comment">// [1 2 3] 修改数组的值</span>

<span class="token function">len</span><span class="token punctuation">(</span>strList<span class="token punctuation">)</span>                                     <span class="token comment">// 3 strList 长度为 3</span>
<span class="token function">cap</span><span class="token punctuation">(</span>intList<span class="token punctuation">)</span>                                     <span class="token comment">// 3 intList 容量为 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="any-类型数组" tabindex="-1"><a class="header-anchor" href="#any-类型数组" aria-hidden="true">#</a> any 类型数组</h3><p>any 类型数组的元素可以是任意类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> anyList <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>any                               <span class="token comment">// [&lt;nil&gt; &lt;nil&gt; &lt;nil&gt;] any 类型初始值是 nil</span>
anyList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> anyList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;he&quot;</span><span class="token punctuation">,</span> <span class="token number">20000</span>             <span class="token comment">// [he 2 &lt;nil&gt;]</span>

anyList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> anyList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; llo&quot;</span>        <span class="token comment">// any 转实际类型操作需要显示声明</span>
anyList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> anyList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>

<span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> anyList <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;index: %v, value: %v  type: %T\\n&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">&gt;</span> index<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> hello <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token builtin">string</span> 
<span class="token operator">&gt;</span> index<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">20000</span> <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token builtin">int</span> 
<span class="token operator">&gt;</span> index<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">&gt;</span> <span class="token keyword">type</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token boolean">nil</span><span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组传递" tabindex="-1"><a class="header-anchor" href="#数组传递" aria-hidden="true">#</a> 数组传递</h3><p>数组赋值或作为函数参数时, 传递的都是数组的拷贝<br> 函数若想修改源数组, 传参时需要传入数组地址</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">three</span><span class="token punctuation">(</span>list <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 参数是数组值传递, 外部数组不变</span>
    list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>                                  
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">third</span><span class="token punctuation">(</span>list <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token comment">// 参数是数组的指针类型, 修改会同步外部数组</span>
    list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span>
<span class="token punctuation">}</span>

source <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span>                       <span class="token comment">// 定义 source 数组</span>
<span class="token builtin">copy</span> <span class="token operator">:=</span> source                                  <span class="token comment">// copy 为 source 的拷贝, 互不影响</span>
<span class="token function">third</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token builtin">copy</span><span class="token punctuation">)</span>                                    <span class="token comment">// 传入 copy 地址, 函数内的修改会同步给外部 copy </span>
<span class="token function">three</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>                                   <span class="token comment">// 传入 source 的拷贝, 函数内修改不影响外部 source </span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;source: %v  copy: %v\\n&quot;</span><span class="token punctuation">,</span> source<span class="token punctuation">,</span> <span class="token builtin">copy</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> source<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span>  <span class="token builtin">copy</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">9</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="切片" tabindex="-1"><a class="header-anchor" href="#切片" aria-hidden="true">#</a> 切片</h2><ul><li>切片是一组<strong>数量可变</strong>的元素集合</li><li>切片是引用类型, 切片本身不存储数据, 切片赋值传递的是地址</li><li>切片会自动扩容以存储所有添加的数据</li></ul><h3 id="切片定义" tabindex="-1"><a class="header-anchor" href="#切片定义" aria-hidden="true">#</a> 切片定义</h3><p><code>var</code> 声明切片<br><code>make</code> 构造切片<br> 从数组截取切片</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">{</span>                              <span class="token comment">// 切片定义 $GOROOT/go/src/runtime/slice.go</span>
    array unsafe<span class="token punctuation">.</span>Pointer                         <span class="token comment">// 指向一个数组中某个元素的指针 (每个切片都对应一个数组)</span>
    <span class="token builtin">len</span> <span class="token builtin">int</span>                                      <span class="token comment">// 切片长度</span>
    <span class="token builtin">cap</span> <span class="token builtin">int</span>                                      <span class="token comment">// 切片容量</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> strSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>                            <span class="token comment">// nil 切片声明, 创建一个 nil 切片, 与 nil 相等 </span>
intSlice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>                              <span class="token comment">// [] 切片声明并初始化, 创建空切片, 与 nil 不相等</span>
boolSlice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                  <span class="token comment">// [false] 初始化布尔切片, 长度为 1, 容量为 2</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strSlice <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>                     <span class="token comment">// true nil 切片与 nil 一致</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>intSlice <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>                     <span class="token comment">// false 空切片与 nil 不一致</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切片也可以从数组中截取一段<br> 切片的长度为截取数据的数量, 切片容量为切片开端到数组结尾数量</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>list <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>
slice <span class="token operator">:=</span> list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>                               <span class="token comment">// [1 2] 截取数组创建切片</span>
<span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;length: %d capacity: %d \\n&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span> length<span class="token punctuation">:</span> <span class="token number">2</span> capacity<span class="token punctuation">:</span> <span class="token number">4</span>                          <span class="token comment">// 切片长度为截取元素数量, 容量切片开头元素到数组结尾</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明的切片与从数组截取的切片完全一致, 声明的切片对应一个不可见的数组<br> 切片扩容超过切片容量时, 切片会指向一个更大容量的数组, 并把旧数组的数据复制到新数组</p><h3 id="切片特性" tabindex="-1"><a class="header-anchor" href="#切片特性" aria-hidden="true">#</a> 切片特性</h3><p>切片是引用类型, 切片不存储数据, 赋值或参数时传递的是地址<br> 切片扩容超过容量后会生成新的切片<br> 切片扩容未容量不会生成新的切片</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>intSlice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span>                       <span class="token comment">// 整数切片初始化, 长度容量均为 4</span>
intArray <span class="token operator">:=</span> intSlice                             <span class="token comment">// 切片赋值, 传递的是地址, 两切片指向同一个数组      </span>
intArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                                  <span class="token comment">// intArray 序号 0 重新赋值, intSlice 跟着变化</span>
intArray <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>intArray<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                   <span class="token comment">// append 添加元素, 超出容量, 扩容返回新的切片, intArray 变更指向的数组</span>
intArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                                  <span class="token comment">// intArray 序号 1 重新赋值</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;intArray: %v intSlice: %v\\n&quot;</span><span class="token punctuation">,</span> intArray<span class="token punctuation">,</span> intSlice<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> intArray<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span><span class="token punctuation">]</span> intSlice<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span>      <span class="token comment">// 切片扩容后, 两切片指定数组不同，值互不影响</span>

slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>                       <span class="token comment">// 构造长度为 3 容量为 5 的切片 </span>
seq <span class="token operator">:=</span> slice                                     <span class="token comment">// seq slice 指向同一组数据</span>
seq <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>seq<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                             <span class="token comment">// [0 0 0 1] seq 添加数据, 未超出容量, seq 和 slice 仍指向同一组数据</span>
slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                         <span class="token comment">// [0 0 0 2] slice 添加数据, 未超出容量, seq 和 slice 仍指向同一组数据</span>
<span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;seq: %v slice: %v\\n&quot;</span><span class="token punctuation">,</span> seq<span class="token punctuation">,</span> slice<span class="token punctuation">)</span>        <span class="token comment">// seq 和 slice 一直指向同一组数据</span>
<span class="token operator">&gt;</span> seq<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span><span class="token punctuation">]</span> slice<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span><span class="token punctuation">]</span>                <span class="token comment">// slice 变更覆盖 seq 变更</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Golang 1.20 切片的扩容策略 <code>$GOROOT/go/src/runtime/slice.go</code> <code>func growslice</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>
doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap
<span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">&gt;</span> doublecap <span class="token punctuation">{</span>                             <span class="token comment">// 所需容量大于两倍的原有容量</span>
    newcap <span class="token operator">=</span> <span class="token builtin">cap</span>                                 <span class="token comment">// 扩容后容量等于所需容量</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                         <span class="token comment">// 所需容量小于两倍原有容量情况下</span>
    <span class="token keyword">const</span> threshold <span class="token operator">=</span> <span class="token number">256</span>                        <span class="token comment">// 设置变更策略的容量阈值</span>
    <span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span> <span class="token operator">&lt;</span> threshold <span class="token punctuation">{</span>
        newcap <span class="token operator">=</span> doublecap                       <span class="token comment">// 原有容量小于 256, 新数组容量为原有两倍</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Check 0 &lt; newcap to detect overflow</span>
        <span class="token comment">// and prevent an infinite loop.</span>
        <span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>         <span class="token comment">// 原有容量大于 256, 旧容量自增 192 加 旧容量的四分之一</span>
            <span class="token comment">// Transition from growing 2x for small slices</span>
            <span class="token comment">// to growing 1.25x for large slices. This formula</span>
            <span class="token comment">// gives a smooth-ish transition between the two.</span>
            newcap <span class="token operator">+=</span> <span class="token punctuation">(</span>newcap <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>threshold<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Set newcap to the requested cap when</span>
        <span class="token comment">// the newcap calculation overflowed.</span>
        <span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            newcap <span class="token operator">=</span> <span class="token builtin">cap</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Golang 扩容增速从 2 倍逐渐减少至 1.25 倍<br> 不同类型切片在扩容时候还有特殊的偏移增长机制</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2049</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">{</span>
    oldcap <span class="token operator">:=</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
    slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    newcap <span class="token operator">:=</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>

    <span class="token keyword">if</span> oldcap <span class="token operator">!=</span> newcap <span class="token punctuation">{</span>
        <span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;int old: %d  new %d \\n&quot;</span><span class="token punctuation">,</span> oldcap<span class="token punctuation">,</span> newcap<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">&gt;</span> <span class="token builtin">int</span> old<span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token builtin">new</span> <span class="token number">160</span> 
<span class="token operator">&gt;</span> <span class="token builtin">int</span> old<span class="token punctuation">:</span> <span class="token number">160</span>  <span class="token builtin">new</span> <span class="token number">336</span> 
<span class="token operator">&gt;</span> <span class="token builtin">int</span> old<span class="token punctuation">:</span> <span class="token number">336</span>  <span class="token builtin">new</span> <span class="token number">672</span> 
<span class="token operator">&gt;</span> <span class="token builtin">int</span> old<span class="token punctuation">:</span> <span class="token number">672</span>  <span class="token builtin">new</span> <span class="token number">1184</span> 
<span class="token operator">&gt;</span> <span class="token builtin">int</span> old<span class="token punctuation">:</span> <span class="token number">1184</span>  <span class="token builtin">new</span> <span class="token number">1696</span> 
<span class="token operator">&gt;</span> <span class="token builtin">int</span> old<span class="token punctuation">:</span> <span class="token number">1696</span>  <span class="token builtin">new</span> <span class="token number">2384</span> 

<span class="token operator">&gt;</span> <span class="token builtin">int8</span> old<span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token builtin">new</span> <span class="token number">160</span> 
<span class="token operator">&gt;</span> <span class="token builtin">int8</span> old<span class="token punctuation">:</span> <span class="token number">160</span>  <span class="token builtin">new</span> <span class="token number">320</span> 
<span class="token operator">&gt;</span> <span class="token builtin">int8</span> old<span class="token punctuation">:</span> <span class="token number">320</span>  <span class="token builtin">new</span> <span class="token number">640</span> 
<span class="token operator">&gt;</span> <span class="token builtin">int8</span> old<span class="token punctuation">:</span> <span class="token number">640</span>  <span class="token builtin">new</span> <span class="token number">1024</span> 
<span class="token operator">&gt;</span> <span class="token builtin">int8</span> old<span class="token punctuation">:</span> <span class="token number">1024</span>  <span class="token builtin">new</span> <span class="token number">1536</span> 
<span class="token operator">&gt;</span> <span class="token builtin">int8</span> old<span class="token punctuation">:</span> <span class="token number">1536</span>  <span class="token builtin">new</span> <span class="token number">2304</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切片操作" tabindex="-1"><a class="header-anchor" href="#切片操作" aria-hidden="true">#</a> 切片操作</h3><p>切片使用 <code>append</code> 添加 删除 插入元素</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code> slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span>
 slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">)</span>           <span class="token comment">// append 添加数据 [0 0 0 0 1 1] </span>
 slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> slice<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>         <span class="token comment">// append 删除数据 [0 0 1 1] </span>
 slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> slice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>

 fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;slice: %v\\n&quot;</span><span class="token punctuation">,</span> slice<span class="token punctuation">)</span>
 <span class="token operator">&gt;</span> slice<span class="token punctuation">:</span> slice<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span>                     <span class="token comment">// append 插入数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切片索引 <code>0 &lt;= index &lt; length &lt;= capacity</code><br> 截取切片片段 list[low:high]<br> 切片索引不能为负数<br> 截取切片时以 list[low:high:max] 设定长度和容量</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>list <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>

list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>                                          <span class="token comment">// 3         切片索引 从左往右 0 开始第 3 个数</span>
list<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                                <span class="token comment">// 3         切片索引 最后一个数据</span>
list<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>                                         <span class="token comment">// [0 1]     从切片开端到索引 2 截取片段 </span>
list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                                         <span class="token comment">// [1 2 3]   从索引 1 到切片结尾</span>
list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>                                        <span class="token comment">// [1 2]     切片索引扁片(左闭右开)</span>
list<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                                          <span class="token comment">// [0 1 2 3] 切片全部数据</span>

list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>                                        <span class="token comment">// 忽略 high [low:]    容量 3 (length - low)</span>
list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>                                      <span class="token comment">// 忽略 high [low:max] 容量 2 (max - low)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment">// 切片排序</span>
<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">6</span><span class="token punctuation">]</span>

<span class="token function">copy</span><span class="token punctuation">(</span>destSlice<span class="token punctuation">,</span> sourceSlice<span class="token punctuation">)</span>                    <span class="token comment">// 切片复制, dest 容量会影响复制结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","go-2-list.html.vue"]]);export{r as default};
