import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-8da2a3ac.js";const t={},o=e(`<h2 id="容器列表" tabindex="-1"><a class="header-anchor" href="#容器列表" aria-hidden="true">#</a> 容器列表</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span>                                                         <span class="token comment"># 显示容器列表及相关信息</span>

 $ <span class="token function">docker</span> <span class="token function">ps</span>
 $ <span class="token function">docker</span> <span class="token function">ps</span> -a, <span class="token parameter variable">--all</span>                                                         <span class="token comment"># 显示所有容器, 包括未运行的</span>
 $ <span class="token function">docker</span> <span class="token function">ps</span> -s, <span class="token parameter variable">--size</span>                                                        <span class="token comment"># 显示正在运行的容器, 显示容器大小</span>
 $ <span class="token function">docker</span> <span class="token function">ps</span> -q, <span class="token parameter variable">--quite</span>                                                       <span class="token comment"># 仅显示容器 ID</span>

CONTAINER ID   IMAGE         COMMAND                  CREATED        STATUS         PORTS                     NAMES      SIZE
7eab1cd126af   43761bd5b76d  <span class="token string">&quot;docker-entrypoint.s…&quot;</span>   <span class="token number">43</span> hours ago   Up <span class="token number">43</span> hours    <span class="token number">27017</span>/tcp                 person     0B <span class="token punctuation">(</span>virtual 700MB<span class="token punctuation">)</span>
ee0c15a3a0ee   mongo         <span class="token string">&quot;docker-entrypoint.s…&quot;</span>   <span class="token number">44</span> hours ago   Up <span class="token number">44</span> hours    <span class="token number">0.0</span>.0.0:8589-<span class="token operator">&gt;</span><span class="token number">27017</span>/tcp   demo       0B <span class="token punctuation">(</span>virtual 700MB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;"><code>CONTAINER ID</code></th><th style="text-align:left;"><code>IMAGE</code></th><th style="text-align:left;"><code>COMMAND</code></th><th style="text-align:left;"><code>CREATED</code></th><th style="text-align:left;"><code>STATUS</code></th><th style="text-align:left;"><code>PORTS</code></th><th style="text-align:left;"><code>NAMES</code></th><th style="text-align:left;"><code>SIZE</code></th></tr></thead><tbody><tr><td style="text-align:left;">容器 ID</td><td style="text-align:left;">生成容器的镜像</td><td style="text-align:left;">启动容器时运行的命令</td><td style="text-align:left;">容器创建时间</td><td style="text-align:left;">容器状态</td><td style="text-align:left;">机器端口-&gt;容器端口</td><td style="text-align:left;">容器名称</td><td style="text-align:left;">容器大小</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">docker</span> stop    <span class="token operator">&lt;</span>CONTAINER ID <span class="token operator">|</span> NAMES<span class="token operator">&gt;</span>                                       <span class="token comment"># 关闭容器</span>
 $ <span class="token function">docker</span> start   <span class="token operator">&lt;</span>CONTAINER ID <span class="token operator">|</span> NAMES<span class="token operator">&gt;</span>                                       <span class="token comment"># 启动容器</span>
 $ <span class="token function">docker</span> <span class="token function">kill</span>    <span class="token operator">&lt;</span>CONTAINER ID <span class="token operator">|</span> NAMES<span class="token operator">&gt;</span>                                       <span class="token comment"># 杀死容器进程</span>
 $ <span class="token function">docker</span> restart <span class="token operator">&lt;</span>CONTAINER ID <span class="token operator">|</span> NAMES<span class="token operator">&gt;</span>                                       <span class="token comment"># 重启容器</span>
 $ <span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span>   <span class="token operator">&lt;</span>CONTAINER ID <span class="token operator">|</span> NAMES<span class="token operator">&gt;</span>                                       <span class="token comment"># 强制删除容器(运行中的容器也会删除) </span>

 $ <span class="token function">docker</span> logs    <span class="token operator">&lt;</span>CONTAINER ID <span class="token operator">|</span> NAMES<span class="token operator">&gt;</span>                                       <span class="token comment"># 显示指定容器 log</span>
 $ <span class="token function">docker</span> <span class="token function">top</span>     <span class="token operator">&lt;</span>CONTAINER ID <span class="token operator">|</span> NAMES<span class="token operator">&gt;</span>                                       <span class="token comment"># 列出指定容器进程</span>
 $ <span class="token function">docker</span> port    <span class="token operator">&lt;</span>CONTAINER ID <span class="token operator">|</span> NAMES<span class="token operator">&gt;</span>                                       <span class="token comment"># 显示容器的端口映射</span>

 $ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER COMMAND <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>                            <span class="token comment"># 进入容器执行命令(容器在运行状态才可进入)</span>
 $ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mongo-slave1 <span class="token function">bash</span>                                           <span class="token comment"># 以交互式进入 mongo-slave1 容器,执行 bash, 并留在容器中(exit 退出容器)</span>
 $ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> mongo-slave1 mongosh <span class="token parameter variable">--version</span>                                  <span class="token comment"># 进入 mongo-slave1 容器查看 mongosh 版本并退出</span>
 <span class="token operator">&gt;</span> <span class="token number">1.6</span>.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建容器" tabindex="-1"><a class="header-anchor" href="#创建容器" aria-hidden="true">#</a> 创建容器</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Usage: <span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

Options:
  -d, <span class="token parameter variable">--detach</span>                                                                 <span class="token comment"># 后台运行容器，并输出容器ID</span>
  -e, <span class="token parameter variable">--env</span> list                                                               <span class="token comment"># 设置环境变量，该变量可以在容器内使用</span>
  -h, <span class="token parameter variable">--hostname</span> string                                                        <span class="token comment"># 指定容器的hostname</span>
  -i, <span class="token parameter variable">--interactive</span>                                                            <span class="token comment"># 以交互模式运行容器，通常与-t同时使用</span>
  -l, <span class="token parameter variable">--label</span> list                                                             <span class="token comment"># 给容器添加标签</span>
  <span class="token parameter variable">--name</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>                                                                <span class="token comment"># 设置容器名称，否则会自动命名</span>
  <span class="token parameter variable">--network</span> string                                                             <span class="token comment"># 将容器加入指定网络</span>
  -p, <span class="token parameter variable">--publish</span> list                                                           <span class="token comment"># 设置容器映射端口 &lt;server port&gt;:&lt;docker port&gt;</span>
  -P,--publish-all                                                             <span class="token comment"># 将容器设置的所有exposed端口进行随机映射</span>
  <span class="token parameter variable">--restart</span> <span class="token operator">&lt;</span>restart option<span class="token operator">&gt;</span>                                                   <span class="token comment"># 容器重启策略，默认为不重启</span>
    on-failure<span class="token punctuation">[</span>:max-retries<span class="token punctuation">]</span>：                                                 <span class="token comment"># 在容器非正常退出时重启，可以设置重启次数。</span>
    unless-stopped：                                                           <span class="token comment"># 总是重启，除非使用stop停止容器</span>
    always：                                                                   <span class="token comment"># 总是重启</span>
  <span class="token parameter variable">--rm</span>                                                                         <span class="token comment"># 容器退出时则自动删除容器</span>
  -t, <span class="token parameter variable">--tty</span>                                                                    <span class="token comment"># 分配一个伪终端</span>
  -u, <span class="token parameter variable">--user</span> <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>                                                        <span class="token comment"># 运行用户或者UID</span>
  -v, <span class="token parameter variable">--volume</span> list                                                            <span class="token comment"># 容器目录映射到主机目录 &lt;server path&gt;:&lt;docker path&gt;</span>
  -w, <span class="token parameter variable">--workdir</span> <span class="token operator">&lt;</span>work path<span class="token operator">&gt;</span>                                                    <span class="token comment"># 容器的工作目录</span>
  <span class="token parameter variable">--privileged</span>                                                                 <span class="token comment"># 给容器特权</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> ubuntu <span class="token function">bash</span>                                             <span class="token comment"># 以 ubuntu 镜像创建容器(自动命名), 创建后执行 bash, 退出后自动删除容器 </span>
 $ <span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p</span> <span class="token number">8589</span>:27017 <span class="token parameter variable">--name</span> demo mongo                             <span class="token comment"># 以 mongo 镜像创建 demo 容器, 后台运行, 机器 8589 端口映射到容器 27017 端口</span>
 $ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">-v</span> /root/docker:/root debian <span class="token function">bash</span>                       <span class="token comment"># debian 镜像创建容器, 容器 /root 目录映射到主机 /root/docker 目录</span>

$ <span class="token function">docker</span> <span class="token function">ps</span>
CONTAINER ID  IMAGE  COMMAND                 CREATED         STATUS         PORTS                     NAMES
ee0c15a3a0ee  mongo  <span class="token string">&quot;docker-entrypoint.s…&quot;</span>  <span class="token number">13</span> seconds ago  Up <span class="token number">11</span> seconds  <span class="token number">0.0</span>.0.0:8589-<span class="token operator">&gt;</span><span class="token number">27017</span>/tcp   demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),p=[o];function l(c,r){return s(),a("div",null,p)}const m=n(t,[["render",l],["__file","docker-2-container.html.vue"]]);export{m as default};
